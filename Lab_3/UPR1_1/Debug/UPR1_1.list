
UPR1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a88  08007a88  00009028  2**0
                  CONTENTS
  4 .ARM          00000008  08007a88  08007a88  00008a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a90  08007a90  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a94  08007a94  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08007a98  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a9c  20000028  08007ac0  00009028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ac4  08007ac0  00009ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b687  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003883  00000000  00000000  000246df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  00027f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fe  00000000  00000000  00029588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000387a  00000000  00000000  0002a686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001903d  00000000  00000000  0002df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b263  00000000  00000000  00046f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001521a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  001521e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00157f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000028 	.word	0x20000028
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800799c 	.word	0x0800799c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000002c 	.word	0x2000002c
 800021c:	0800799c 	.word	0x0800799c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t Value=0;
 8000516:	2300      	movs	r3, #0
 8000518:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd09 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f859 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f92b 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000526:	f000 f8a1 	bl	800066c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    BSP_LED_Init(LED_GREEN); // Initialize the LED
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fb88 	bl	8000c40 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f004 fc76 	bl	8004e20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a1d      	ldr	r2, [pc, #116]	@ (80005ac <main+0x9c>)
 8000536:	2100      	movs	r1, #0
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0xa0>)
 800053a:	f004 fcbb 	bl	8004eb4 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <main+0xa4>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of T10ms */
  T10msHandle = osThreadNew(Task10ms, NULL, &T10ms_attributes);
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <main+0xa8>)
 8000546:	2100      	movs	r1, #0
 8000548:	481c      	ldr	r0, [pc, #112]	@ (80005bc <main+0xac>)
 800054a:	f004 fcb3 	bl	8004eb4 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1b      	ldr	r2, [pc, #108]	@ (80005c0 <main+0xb0>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of T100ms */
  T100msHandle = osThreadNew(Task100ms, NULL, &T100ms_attributes);
 8000554:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <main+0xb4>)
 8000556:	2100      	movs	r1, #0
 8000558:	481b      	ldr	r0, [pc, #108]	@ (80005c8 <main+0xb8>)
 800055a:	f004 fcab 	bl	8004eb4 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <main+0xbc>)
 8000562:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fb6b 	bl	8000c40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800056a:	2101      	movs	r1, #1
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fb9d 	bl	8000cac <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000572:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <main+0xc0>)
 8000574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000578:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <main+0xc0>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <main+0xc0>)
 8000582:	2200      	movs	r2, #0
 8000584:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <main+0xc0>)
 8000588:	2200      	movs	r2, #0
 800058a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800058c:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <main+0xc0>)
 800058e:	2200      	movs	r2, #0
 8000590:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000592:	490f      	ldr	r1, [pc, #60]	@ (80005d0 <main+0xc0>)
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fc15 	bl	8000dc4 <BSP_COM_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <main+0x94>
  {
    Error_Handler();
 80005a0:	f000 fa34 	bl	8000a0c <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 80005a4:	f004 fc60 	bl	8004e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x98>
 80005ac:	080079e8 	.word	0x080079e8
 80005b0:	08000849 	.word	0x08000849
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	08007a0c 	.word	0x08007a0c
 80005bc:	08000859 	.word	0x08000859
 80005c0:	200000cc 	.word	0x200000cc
 80005c4:	08007a30 	.word	0x08007a30
 80005c8:	080009a5 	.word	0x080009a5
 80005cc:	200000d0 	.word	0x200000d0
 80005d0:	2000004c 	.word	0x2000004c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2238      	movs	r2, #56	@ 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 f9a0 	bl	8007928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f002 fe38 	bl	800326c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000616:	2355      	movs	r3, #85	@ 0x55
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fed2 	bl	80033d4 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000636:	f000 f9e9 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f9d0 	bl	80039f8 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800065e:	f000 f9d5 	bl	8000a0c <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	@ 0x30
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f007 f94f 	bl	8007928 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b39      	ldr	r3, [pc, #228]	@ (8000770 <MX_ADC1_Init+0x104>)
 800068c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000692:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <MX_ADC1_Init+0x104>)
 8000694:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <MX_ADC1_Init+0x104>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b33      	ldr	r3, [pc, #204]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006a6:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ac:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006be:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d2:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	481e      	ldr	r0, [pc, #120]	@ (8000770 <MX_ADC1_Init+0x104>)
 80006f6:	f000 fecb 	bl	8001490 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000700:	f000 f984 	bl	8000a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4619      	mov	r1, r3
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_ADC1_Init+0x104>)
 8000710:	f002 f982 	bl	8002a18 <HAL_ADCEx_MultiModeConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071a:	f000 f977 	bl	8000a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_ADC1_Init+0x108>)
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000722:	2306      	movs	r3, #6
 8000724:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072a:	237f      	movs	r3, #127	@ 0x7f
 800072c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072e:	2304      	movs	r3, #4
 8000730:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_ADC1_Init+0x104>)
 800073c:	f001 fc3e 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000746:	f000 f961 	bl	8000a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_ADC1_Init+0x10c>)
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800074e:	230c      	movs	r3, #12
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_ADC1_Init+0x104>)
 8000758:	f001 fc30 	bl	8001fbc <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000762:	f000 f953 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	@ 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000005c 	.word	0x2000005c
 8000774:	04300002 	.word	0x04300002
 8000778:	08600004 	.word	0x08600004

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <MX_GPIO_Init+0xc0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <MX_GPIO_Init+0xc0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_GPIO_Init+0xc0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80007f8:	4811      	ldr	r0, [pc, #68]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007fa:	f002 fd1f 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007fe:	230f      	movs	r3, #15
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000806:	2301      	movs	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_GPIO_Init+0xc8>)
 8000812:	f002 fb79 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000816:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_GPIO_Init+0xc4>)
 8000830:	f002 fb6a 	bl	8002f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800

08000848 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f004 fbc1 	bl	8004fd8 <osDelay>
 8000856:	e7fb      	b.n	8000850 <StartDefaultTask+0x8>

08000858 <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
  /* Infinite loop */
  for(;;)
  {
	 if (!Button1State)
 8000860:	4b4a      	ldr	r3, [pc, #296]	@ (800098c <Task10ms+0x134>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d116      	bne.n	8000896 <Task10ms+0x3e>
	 {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086e:	4848      	ldr	r0, [pc, #288]	@ (8000990 <Task10ms+0x138>)
 8000870:	f002 fce4 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087a:	4845      	ldr	r0, [pc, #276]	@ (8000990 <Task10ms+0x138>)
 800087c:	f002 fcde 	bl	800323c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2104      	movs	r1, #4
 8000884:	4842      	ldr	r0, [pc, #264]	@ (8000990 <Task10ms+0x138>)
 8000886:	f002 fcd9 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	2102      	movs	r1, #2
 800088e:	4840      	ldr	r0, [pc, #256]	@ (8000990 <Task10ms+0x138>)
 8000890:	f002 fcd4 	bl	800323c <HAL_GPIO_WritePin>
 8000894:	e066      	b.n	8000964 <Task10ms+0x10c>
	}

	 else if (!Button2State)
 8000896:	4b3f      	ldr	r3, [pc, #252]	@ (8000994 <Task10ms+0x13c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d116      	bne.n	80008cc <Task10ms+0x74>
	 {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a4:	483a      	ldr	r0, [pc, #232]	@ (8000990 <Task10ms+0x138>)
 80008a6:	f002 fcc9 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b0:	4837      	ldr	r0, [pc, #220]	@ (8000990 <Task10ms+0x138>)
 80008b2:	f002 fcc3 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2102      	movs	r1, #2
 80008ba:	4835      	ldr	r0, [pc, #212]	@ (8000990 <Task10ms+0x138>)
 80008bc:	f002 fcbe 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2104      	movs	r1, #4
 80008c4:	4832      	ldr	r0, [pc, #200]	@ (8000990 <Task10ms+0x138>)
 80008c6:	f002 fcb9 	bl	800323c <HAL_GPIO_WritePin>
 80008ca:	e04b      	b.n	8000964 <Task10ms+0x10c>

	}

	else if (!Button3State)
 80008cc:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <Task10ms+0x140>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d116      	bne.n	8000902 <Task10ms+0xaa>
	 {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2102      	movs	r1, #2
 80008d8:	482d      	ldr	r0, [pc, #180]	@ (8000990 <Task10ms+0x138>)
 80008da:	f002 fcaf 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2104      	movs	r1, #4
 80008e2:	482b      	ldr	r0, [pc, #172]	@ (8000990 <Task10ms+0x138>)
 80008e4:	f002 fcaa 	bl	800323c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ee:	4828      	ldr	r0, [pc, #160]	@ (8000990 <Task10ms+0x138>)
 80008f0:	f002 fca4 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008fa:	4825      	ldr	r0, [pc, #148]	@ (8000990 <Task10ms+0x138>)
 80008fc:	f002 fc9e 	bl	800323c <HAL_GPIO_WritePin>
 8000900:	e030      	b.n	8000964 <Task10ms+0x10c>
	}

	else if (!Button4State)
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <Task10ms+0x144>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d116      	bne.n	8000938 <Task10ms+0xe0>
	 {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2102      	movs	r1, #2
 800090e:	4820      	ldr	r0, [pc, #128]	@ (8000990 <Task10ms+0x138>)
 8000910:	f002 fc94 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	481d      	ldr	r0, [pc, #116]	@ (8000990 <Task10ms+0x138>)
 800091a:	f002 fc8f 	bl	800323c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000924:	481a      	ldr	r0, [pc, #104]	@ (8000990 <Task10ms+0x138>)
 8000926:	f002 fc89 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000930:	4817      	ldr	r0, [pc, #92]	@ (8000990 <Task10ms+0x138>)
 8000932:	f002 fc83 	bl	800323c <HAL_GPIO_WritePin>
 8000936:	e015      	b.n	8000964 <Task10ms+0x10c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4814      	ldr	r0, [pc, #80]	@ (8000990 <Task10ms+0x138>)
 800093e:	f002 fc7d 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	4812      	ldr	r0, [pc, #72]	@ (8000990 <Task10ms+0x138>)
 8000948:	f002 fc78 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000952:	480f      	ldr	r0, [pc, #60]	@ (8000990 <Task10ms+0x138>)
 8000954:	f002 fc72 	bl	800323c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095e:	480c      	ldr	r0, [pc, #48]	@ (8000990 <Task10ms+0x138>)
 8000960:	f002 fc6c 	bl	800323c <HAL_GPIO_WritePin>
	}
	 __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOSMP);
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <Task10ms+0x148>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2202      	movs	r2, #2
 800096a:	601a      	str	r2, [r3, #0]
	 __HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOSMP);
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <Task10ms+0x148>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <Task10ms+0x148>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f042 0202 	orr.w	r2, r2, #2
 800097a:	605a      	str	r2, [r3, #4]
	 HAL_ADC_Start_IT(&hadc1);
 800097c:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <Task10ms+0x148>)
 800097e:	f000 ff43 	bl	8001808 <HAL_ADC_Start_IT>

    osDelay(10);
 8000982:	200a      	movs	r0, #10
 8000984:	f004 fb28 	bl	8004fd8 <osDelay>
	 if (!Button1State)
 8000988:	e76a      	b.n	8000860 <Task10ms+0x8>
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	48000400 	.word	0x48000400
 8000994:	20000001 	.word	0x20000001
 8000998:	20000002 	.word	0x20000002
 800099c:	20000003 	.word	0x20000003
 80009a0:	2000005c 	.word	0x2000005c

080009a4 <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
  /* Infinite loop */
  for(;;)
  {
	  Button1State=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80009ac:	2101      	movs	r1, #1
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <Task100ms+0x54>)
 80009b0:	f002 fc2c 	bl	800320c <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <Task100ms+0x58>)
 80009ba:	701a      	strb	r2, [r3, #0]
	  Button2State=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80009bc:	2102      	movs	r1, #2
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <Task100ms+0x54>)
 80009c0:	f002 fc24 	bl	800320c <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <Task100ms+0x5c>)
 80009ca:	701a      	strb	r2, [r3, #0]
	  Button3State=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80009cc:	2104      	movs	r1, #4
 80009ce:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <Task100ms+0x54>)
 80009d0:	f002 fc1c 	bl	800320c <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <Task100ms+0x60>)
 80009da:	701a      	strb	r2, [r3, #0]
	  Button4State=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80009dc:	2108      	movs	r1, #8
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <Task100ms+0x54>)
 80009e0:	f002 fc14 	bl	800320c <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <Task100ms+0x64>)
 80009ea:	701a      	strb	r2, [r3, #0]
	  osDelay(100);
 80009ec:	2064      	movs	r0, #100	@ 0x64
 80009ee:	f004 faf3 	bl	8004fd8 <osDelay>
	  Button1State=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80009f2:	bf00      	nop
 80009f4:	e7da      	b.n	80009ac <Task100ms+0x8>
 80009f6:	bf00      	nop
 80009f8:	48000800 	.word	0x48000800
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000001 	.word	0x20000001
 8000a04:	20000002 	.word	0x20000002
 8000a08:	20000003 	.word	0x20000003

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    __disable_irq();
    while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);

  bufferValues[0] = HAL_ADC_GetValue(&hadc1);
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a22:	f001 f849 	bl	8001ab8 <HAL_ADC_GetValue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a2a:	6013      	str	r3, [r2, #0]
  bufferValues[1] = HAL_ADC_GetValue(&hadc1);
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a2e:	f001 f843 	bl	8001ab8 <HAL_ADC_GetValue>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a03      	ldr	r2, [pc, #12]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a36:	6053      	str	r3, [r2, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000005c 	.word	0x2000005c
 8000a44:	20000044 	.word	0x20000044

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_MspInit+0x50>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f002 f9aa 	bl	8002dde <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a8a:	f002 fc93 	bl	80033b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09e      	sub	sp, #120	@ 0x78
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	2254      	movs	r2, #84	@ 0x54
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f006 ff33 	bl	8007928 <memset>
  if(hadc->Instance==ADC1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aca:	d13c      	bne.n	8000b46 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ad2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ad6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f9a7 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ae8:	f7ff ff90 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	4a11      	ldr	r2, [pc, #68]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_ADC_MspInit+0xb4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b20:	2303      	movs	r3, #3
 8000b22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f002 f9e9 	bl	8002f08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	2012      	movs	r0, #18
 8000b3c:	f002 f94f 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b40:	2012      	movs	r0, #18
 8000b42:	f002 f966 	bl	8002e12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3778      	adds	r7, #120	@ 0x78
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 fa21 	bl	8000fd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b92:	f005 fe49 	bl	8006828 <xTaskGetSchedulerState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d001      	beq.n	8000ba0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b9c:	f006 fc44 	bl	8007428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <ADC1_2_IRQHandler+0x10>)
 8000baa:	f000 ff93 	bl	8001ad4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000005c 	.word	0x2000005c

08000bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f8e3 	bl	8000d88 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f006 fe8d 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fc77 	bl	8000510 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000c30:	08007a98 	.word	0x08007a98
  ldr r2, =_sbss
 8000c34:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000c38:	20001ac4 	.word	0x20001ac4

08000c3c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC3_IRQHandler>
	...

08000c40 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <BSP_LED_Init+0x64>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <BSP_LED_Init+0x64>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <BSP_LED_Init+0x64>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000c62:	2320      	movs	r3, #32
 8000c64:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <BSP_LED_Init+0x68>)
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	f107 020c 	add.w	r2, r7, #12
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f941 	bl	8002f08 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <BSP_LED_Init+0x68>)
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	2120      	movs	r1, #32
 8000c90:	2200      	movs	r2, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fad2 	bl	800323c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	20000008 	.word	0x20000008

08000cac <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <BSP_PB_Init+0xc4>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d70 <BSP_PB_Init+0xc4>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <BSP_PB_Init+0xc4>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10c      	bne.n	8000d02 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <BSP_PB_Init+0xc8>)
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f904 	bl	8002f08 <HAL_GPIO_Init>
 8000d00:	e031      	b.n	8000d66 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <BSP_PB_Init+0xc8>)
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	f107 020c 	add.w	r2, r7, #12
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 f8f6 	bl	8002f08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <BSP_PB_Init+0xcc>)
 8000d22:	441a      	add	r2, r3
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4915      	ldr	r1, [pc, #84]	@ (8000d7c <BSP_PB_Init+0xd0>)
 8000d28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4610      	mov	r0, r2
 8000d30:	f002 f8a6 	bl	8002e80 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <BSP_PB_Init+0xcc>)
 8000d3a:	1898      	adds	r0, r3, r2
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <BSP_PB_Init+0xd4>)
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	461a      	mov	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f002 f87d 	bl	8002e46 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000d4c:	2028      	movs	r0, #40	@ 0x28
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <BSP_PB_Init+0xd8>)
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f002 f840 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d5e:	2328      	movs	r3, #40	@ 0x28
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f856 	bl	8002e12 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	200000d4 	.word	0x200000d4
 8000d7c:	08007a6c 	.word	0x08007a6c
 8000d80:	20000014 	.word	0x20000014
 8000d84:	20000018 	.word	0x20000018

08000d88 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <BSP_PB_IRQHandler+0x20>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f884 	bl	8002ea8 <HAL_EXTI_IRQHandler>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000d4 	.word	0x200000d4

08000dac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d903      	bls.n	8000de2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dda:	f06f 0301 	mvn.w	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e018      	b.n	8000e14 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2294      	movs	r2, #148	@ 0x94
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <BSP_COM_Init+0x5c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f852 	bl	8000e98 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2294      	movs	r2, #148	@ 0x94
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <BSP_COM_Init+0x5c>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f80e 	bl	8000e24 <MX_LPUART1_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000e0e:	f06f 0303 	mvn.w	r3, #3
 8000e12:	e000      	b.n	8000e16 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000dc 	.word	0x200000dc

08000e24 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <MX_LPUART1_Init+0x60>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	220c      	movs	r2, #12
 8000e42:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	895b      	ldrh	r3, [r3, #10]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	891b      	ldrh	r3, [r3, #8]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	899b      	ldrh	r3, [r3, #12]
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e70:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f003 fa2a 	bl	80042cc <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000010 	.word	0x20000010

08000e88 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ff8d 	bl	8000dac <BSP_PB_Callback>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <COM1_MspInit+0x94>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <COM1_MspInit+0x94>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ed0:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed4:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <COM1_MspInit+0x94>)
 8000ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f001 ffff 	bl	8002f08 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000f12:	230c      	movs	r3, #12
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f20:	f001 fff2 	bl	8002f08 <HAL_GPIO_Init>
}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f001 ff44 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f40:	200f      	movs	r0, #15
 8000f42:	f000 f80d 	bl	8000f60 <HAL_InitTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	e001      	b.n	8000f56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f52:	f7ff fd79 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f56:	79fb      	ldrb	r3, [r7, #7]

}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d022      	beq.n	8000fba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_InitTick+0x6c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_InitTick+0x68>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 ff50 	bl	8002e2e <HAL_SYSTICK_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10f      	bne.n	8000fb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d809      	bhi.n	8000fae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa2:	f001 ff1c 	bl	8002dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0x70>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e004      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000020 	.word	0x20000020
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_IncTick+0x1c>)
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000170 	.word	0x20000170
 8000ff4:	20000020 	.word	0x20000020

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000170 	.word	0x20000170

08001010 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	609a      	str	r2, [r3, #8]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3360      	adds	r3, #96	@ 0x60
 800108a:	461a      	mov	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <LL_ADC_SetOffset+0x44>)
 800109a:	4013      	ands	r3, r2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	03fff000 	.word	0x03fff000

080010c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3360      	adds	r3, #96	@ 0x60
 80010ce:	461a      	mov	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3360      	adds	r3, #96	@ 0x60
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001122:	b480      	push	{r7}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3360      	adds	r3, #96	@ 0x60
 8001132:	461a      	mov	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3360      	adds	r3, #96	@ 0x60
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011da:	b480      	push	{r7}
 80011dc:	b087      	sub	sp, #28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3330      	adds	r3, #48	@ 0x30
 80011ea:	461a      	mov	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	4413      	add	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	211f      	movs	r1, #31
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	0e9b      	lsrs	r3, r3, #26
 8001212:	f003 011f 	and.w	r1, r3, #31
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	431a      	orrs	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3314      	adds	r3, #20
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	0e5b      	lsrs	r3, r3, #25
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	0d1b      	lsrs	r3, r3, #20
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2107      	movs	r1, #7
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	0d1b      	lsrs	r3, r3, #20
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0318 	and.w	r3, r3, #24
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012d4:	40d9      	lsrs	r1, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	400b      	ands	r3, r1
 80012da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012de:	431a      	orrs	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0007ffff 	.word	0x0007ffff

080012f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6093      	str	r3, [r2, #8]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001390:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013b8:	d101      	bne.n	80013be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <LL_ADC_IsEnabled+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_ADC_IsEnabled+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800142a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800142e:	f043 0204 	orr.w	r2, r3, #4
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b04      	cmp	r3, #4
 8001454:	d101      	bne.n	800145a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b08      	cmp	r3, #8
 800147a:	d101      	bne.n	8001480 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1a9      	b.n	80017fe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff faef 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff3f 	bl	8001354 <LL_ADC_IsDeepPowerDownEnabled>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff25 	bl	8001330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff5a 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d115      	bne.n	8001522 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff3e 	bl	800137c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001500:	4b9c      	ldr	r3, [pc, #624]	@ (8001774 <HAL_ADC_Init+0x2e4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	4a9c      	ldr	r2, [pc, #624]	@ (8001778 <HAL_ADC_Init+0x2e8>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001514:	e002      	b.n	800151c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff3c 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff75 	bl	8001442 <LL_ADC_REG_IsConversionOngoing>
 8001558:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8142 	bne.w	80017ec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 813e 	bne.w	80017ec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff35 	bl	80013f4 <LL_ADC_IsEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d141      	bne.n	8001614 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_Init+0x114>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a77      	ldr	r2, [pc, #476]	@ (800177c <HAL_ADC_Init+0x2ec>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d10f      	bne.n	80015c4 <HAL_ADC_Init+0x134>
 80015a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80015a8:	f7ff ff24 	bl	80013f4 <LL_ADC_IsEnabled>
 80015ac:	4604      	mov	r4, r0
 80015ae:	4873      	ldr	r0, [pc, #460]	@ (800177c <HAL_ADC_Init+0x2ec>)
 80015b0:	f7ff ff20 	bl	80013f4 <LL_ADC_IsEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4323      	orrs	r3, r4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e012      	b.n	80015ea <HAL_ADC_Init+0x15a>
 80015c4:	486e      	ldr	r0, [pc, #440]	@ (8001780 <HAL_ADC_Init+0x2f0>)
 80015c6:	f7ff ff15 	bl	80013f4 <LL_ADC_IsEnabled>
 80015ca:	4604      	mov	r4, r0
 80015cc:	486d      	ldr	r0, [pc, #436]	@ (8001784 <HAL_ADC_Init+0x2f4>)
 80015ce:	f7ff ff11 	bl	80013f4 <LL_ADC_IsEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	431c      	orrs	r4, r3
 80015d6:	486c      	ldr	r0, [pc, #432]	@ (8001788 <HAL_ADC_Init+0x2f8>)
 80015d8:	f7ff ff0c 	bl	80013f4 <LL_ADC_IsEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	4323      	orrs	r3, r4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015f6:	d004      	beq.n	8001602 <HAL_ADC_Init+0x172>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a5f      	ldr	r2, [pc, #380]	@ (800177c <HAL_ADC_Init+0x2ec>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x176>
 8001602:	4a62      	ldr	r2, [pc, #392]	@ (800178c <HAL_ADC_Init+0x2fc>)
 8001604:	e000      	b.n	8001608 <HAL_ADC_Init+0x178>
 8001606:	4a62      	ldr	r2, [pc, #392]	@ (8001790 <HAL_ADC_Init+0x300>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fcfe 	bl	8001010 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7f5b      	ldrb	r3, [r3, #29]
 8001618:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800161e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001624:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800162a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001632:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800163e:	2b01      	cmp	r3, #1
 8001640:	d106      	bne.n	8001650 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	045b      	lsls	r3, r3, #17
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <HAL_ADC_Init+0x304>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	430b      	orrs	r3, r1
 800167e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fee4 	bl	8001468 <LL_ADC_INJ_IsConversionOngoing>
 80016a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d17f      	bne.n	80017a8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d17c      	bne.n	80017a8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016ca:	f023 0302 	bic.w	r3, r3, #2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	69b9      	ldr	r1, [r7, #24]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d017      	beq.n	8001710 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6911      	ldr	r1, [r2, #16]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	430b      	orrs	r3, r1
 800170a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800170e:	e013      	b.n	8001738 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800171e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001730:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001734:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800173e:	2b01      	cmp	r3, #1
 8001740:	d12a      	bne.n	8001798 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800175e:	4311      	orrs	r1, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001764:	430a      	orrs	r2, r1
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	e019      	b.n	80017a8 <HAL_ADC_Init+0x318>
 8001774:	20000004 	.word	0x20000004
 8001778:	053e2d63 	.word	0x053e2d63
 800177c:	50000100 	.word	0x50000100
 8001780:	50000400 	.word	0x50000400
 8001784:	50000500 	.word	0x50000500
 8001788:	50000600 	.word	0x50000600
 800178c:	50000300 	.word	0x50000300
 8001790:	50000700 	.word	0x50000700
 8001794:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10c      	bne.n	80017ca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f023 010f 	bic.w	r1, r3, #15
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c8:	e007      	b.n	80017da <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020f 	bic.w	r2, r2, #15
 80017d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ea:	e007      	b.n	80017fc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	@ 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop

08001808 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001818:	d004      	beq.n	8001824 <HAL_ADC_Start_IT+0x1c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a92      	ldr	r2, [pc, #584]	@ (8001a68 <HAL_ADC_Start_IT+0x260>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_ADC_Start_IT+0x20>
 8001824:	4b91      	ldr	r3, [pc, #580]	@ (8001a6c <HAL_ADC_Start_IT+0x264>)
 8001826:	e000      	b.n	800182a <HAL_ADC_Start_IT+0x22>
 8001828:	4b91      	ldr	r3, [pc, #580]	@ (8001a70 <HAL_ADC_Start_IT+0x268>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fd64 	bl	80012f8 <LL_ADC_GetMultimode>
 8001830:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fe03 	bl	8001442 <LL_ADC_REG_IsConversionOngoing>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8132 	bne.w	8001aa8 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Start_IT+0x4a>
 800184e:	2302      	movs	r3, #2
 8001850:	e12d      	b.n	8001aae <HAL_ADC_Start_IT+0x2a6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 ffee 	bl	800283c <ADC_Enable>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 8119 	bne.w	8001a9e <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a78      	ldr	r2, [pc, #480]	@ (8001a68 <HAL_ADC_Start_IT+0x260>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d009      	beq.n	800189e <HAL_ADC_Start_IT+0x96>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a79      	ldr	r2, [pc, #484]	@ (8001a74 <HAL_ADC_Start_IT+0x26c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d002      	beq.n	800189a <HAL_ADC_Start_IT+0x92>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e003      	b.n	80018a2 <HAL_ADC_Start_IT+0x9a>
 800189a:	4b77      	ldr	r3, [pc, #476]	@ (8001a78 <HAL_ADC_Start_IT+0x270>)
 800189c:	e001      	b.n	80018a2 <HAL_ADC_Start_IT+0x9a>
 800189e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d002      	beq.n	80018b0 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018cc:	f023 0206 	bic.w	r2, r3, #6
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	221c      	movs	r2, #28
 80018e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 021c 	bic.w	r2, r2, #28
 80018fa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d108      	bne.n	8001916 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	605a      	str	r2, [r3, #4]
          break;
 8001914:	e008      	b.n	8001928 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	605a      	str	r2, [r3, #4]
          break;
 8001926:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0210 	orr.w	r2, r2, #16
 800193e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_ADC_Start_IT+0x260>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_ADC_Start_IT+0x156>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a49      	ldr	r2, [pc, #292]	@ (8001a74 <HAL_ADC_Start_IT+0x26c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d002      	beq.n	800195a <HAL_ADC_Start_IT+0x152>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e003      	b.n	8001962 <HAL_ADC_Start_IT+0x15a>
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_ADC_Start_IT+0x270>)
 800195c:	e001      	b.n	8001962 <HAL_ADC_Start_IT+0x15a>
 800195e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	4293      	cmp	r3, r2
 8001968:	d008      	beq.n	800197c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d002      	beq.n	800197c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b09      	cmp	r3, #9
 800197a:	d13a      	bne.n	80019f2 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d02d      	beq.n	80019e6 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001992:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d110      	bne.n	80019c4 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0220 	bic.w	r2, r2, #32
 80019b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019c0:	605a      	str	r2, [r3, #4]
              break;
 80019c2:	e010      	b.n	80019e6 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	605a      	str	r2, [r3, #4]
              break;
 80019e4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd15 	bl	800141a <LL_ADC_REG_StartConversion>
 80019f0:	e05c      	b.n	8001aac <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_ADC_Start_IT+0x260>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_ADC_Start_IT+0x214>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <HAL_ADC_Start_IT+0x26c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d002      	beq.n	8001a18 <HAL_ADC_Start_IT+0x210>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e003      	b.n	8001a20 <HAL_ADC_Start_IT+0x218>
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_ADC_Start_IT+0x270>)
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Start_IT+0x218>
 8001a1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a20:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03e      	beq.n	8001aac <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d11a      	bne.n	8001a7c <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0220 	bic.w	r2, r2, #32
 8001a54:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a64:	605a      	str	r2, [r3, #4]
              break;
 8001a66:	e021      	b.n	8001aac <HAL_ADC_Start_IT+0x2a4>
 8001a68:	50000100 	.word	0x50000100
 8001a6c:	50000300 	.word	0x50000300
 8001a70:	50000700 	.word	0x50000700
 8001a74:	50000500 	.word	0x50000500
 8001a78:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a8a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0220 	orr.w	r2, r2, #32
 8001a9a:	605a      	str	r2, [r3, #4]
              break;
 8001a9c:	e006      	b.n	8001aac <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop

08001ab8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_IRQHandler+0x30>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a8e      	ldr	r2, [pc, #568]	@ (8001d38 <HAL_ADC_IRQHandler+0x264>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_IRQHandler+0x34>
 8001b04:	4b8d      	ldr	r3, [pc, #564]	@ (8001d3c <HAL_ADC_IRQHandler+0x268>)
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_IRQHandler+0x36>
 8001b08:	4b8d      	ldr	r3, [pc, #564]	@ (8001d40 <HAL_ADC_IRQHandler+0x26c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fbf4 	bl	80012f8 <LL_ADC_GetMultimode>
 8001b10:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d017      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x78>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b36:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 ff60 	bl	8002a04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x8c>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8094 	beq.w	8001c94 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 808e 	beq.w	8001c94 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fb0d 	bl	80011b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d072      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a64      	ldr	r2, [pc, #400]	@ (8001d38 <HAL_ADC_IRQHandler+0x264>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <HAL_ADC_IRQHandler+0xea>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a65      	ldr	r2, [pc, #404]	@ (8001d44 <HAL_ADC_IRQHandler+0x270>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d002      	beq.n	8001bba <HAL_ADC_IRQHandler+0xe6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_IRQHandler+0xee>
 8001bba:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_ADC_IRQHandler+0x274>)
 8001bbc:	e001      	b.n	8001bc2 <HAL_ADC_IRQHandler+0xee>
 8001bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d008      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d002      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d104      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	e014      	b.n	8001c10 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a53      	ldr	r2, [pc, #332]	@ (8001d38 <HAL_ADC_IRQHandler+0x264>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x130>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a53      	ldr	r2, [pc, #332]	@ (8001d44 <HAL_ADC_IRQHandler+0x270>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d002      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x12c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <HAL_ADC_IRQHandler+0x134>
 8001c00:	4b51      	ldr	r3, [pc, #324]	@ (8001d48 <HAL_ADC_IRQHandler+0x274>)
 8001c02:	e001      	b.n	8001c08 <HAL_ADC_IRQHandler+0x134>
 8001c04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c08:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d135      	bne.n	8001c86 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d12e      	bne.n	8001c86 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fc08 	bl	8001442 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d11a      	bne.n	8001c6e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020c 	bic.w	r2, r2, #12
 8001c46:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c6c:	e00b      	b.n	8001c86 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fec6 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	220c      	movs	r2, #12
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_ADC_IRQHandler+0x1d4>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80b3 	beq.w	8001e1a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80ad 	beq.w	8001e1a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff faa8 	bl	8001232 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ce2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fa63 	bl	80011b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_ADC_IRQHandler+0x264>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x23a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a11      	ldr	r2, [pc, #68]	@ (8001d44 <HAL_ADC_IRQHandler+0x270>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d002      	beq.n	8001d0a <HAL_ADC_IRQHandler+0x236>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_IRQHandler+0x23e>
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_ADC_IRQHandler+0x274>)
 8001d0c:	e001      	b.n	8001d12 <HAL_ADC_IRQHandler+0x23e>
 8001d0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d008      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d002      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d10f      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	e01f      	b.n	8001d76 <HAL_ADC_IRQHandler+0x2a2>
 8001d36:	bf00      	nop
 8001d38:	50000100 	.word	0x50000100
 8001d3c:	50000300 	.word	0x50000300
 8001d40:	50000700 	.word	0x50000700
 8001d44:	50000500 	.word	0x50000500
 8001d48:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a8b      	ldr	r2, [pc, #556]	@ (8001f80 <HAL_ADC_IRQHandler+0x4ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x296>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a8a      	ldr	r2, [pc, #552]	@ (8001f84 <HAL_ADC_IRQHandler+0x4b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d002      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x292>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_IRQHandler+0x29a>
 8001d66:	4b88      	ldr	r3, [pc, #544]	@ (8001f88 <HAL_ADC_IRQHandler+0x4b4>)
 8001d68:	e001      	b.n	8001d6e <HAL_ADC_IRQHandler+0x29a>
 8001d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d6e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d047      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x2c2>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03f      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13a      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da0:	2b40      	cmp	r3, #64	@ 0x40
 8001da2:	d133      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12e      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb58 	bl	8001468 <LL_ADC_INJ_IsConversionOngoing>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11a      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dcc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d112      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001df2:	e00b      	b.n	8001e0c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fdd1 	bl	80029b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2260      	movs	r2, #96	@ 0x60
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d011      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x374>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8aa 	bl	8001f94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x3a4>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fdb7 	bl	80029dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x3d4>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fda9 	bl	80029f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d043      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x466>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03e      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec8:	e021      	b.n	8001f0e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x410>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <HAL_ADC_IRQHandler+0x4ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x414>
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_ADC_IRQHandler+0x4b8>)
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_IRQHandler+0x416>
 8001ee8:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <HAL_ADC_IRQHandler+0x4bc>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fa12 	bl	8001314 <LL_ADC_GetMultiDMATransfer>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10e      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f83b 	bl	8001fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d018      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x4a2>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d013      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	f043 0208 	orr.w	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fd29 	bl	80029c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	@ 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	50000100 	.word	0x50000100
 8001f84:	50000500 	.word	0x50000500
 8001f88:	50000400 	.word	0x50000400
 8001f8c:	50000300 	.word	0x50000300
 8001f90:	50000700 	.word	0x50000700

08001f94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b6      	sub	sp, #216	@ 0xd8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x24>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f000 bc13 	b.w	8002806 <HAL_ADC_ConfigChannel+0x84a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fa28 	bl	8001442 <LL_ADC_REG_IsConversionOngoing>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 83f3 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff f8e7 	bl	80011da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa16 	bl	8001442 <LL_ADC_REG_IsConversionOngoing>
 8002016:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fa22 	bl	8001468 <LL_ADC_INJ_IsConversionOngoing>
 8002024:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 81d9 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 81d4 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002044:	d10f      	bne.n	8002066 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	f7ff f901 	bl	8001258 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f895 	bl	800118e <LL_ADC_SetSamplingTimeCommonConfig>
 8002064:	e00e      	b.n	8002084 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff f8f0 	bl	8001258 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f885 	bl	800118e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d022      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020b6:	f7fe ffdf 	bl	8001078 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f7ff f82b 	bl	8001122 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x126>
 80020dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x128>
 80020e2:	2300      	movs	r3, #0
 80020e4:	461a      	mov	r2, r3
 80020e6:	f7ff f837 	bl	8001158 <LL_ADC_SetOffsetSaturation>
 80020ea:	e17b      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ffe4 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x15c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ffd9 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	e01e      	b.n	8002156 <HAL_ADC_ConfigChannel+0x19a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ffce 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800213e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1b2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e4>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800218a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff9d 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ff81 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_ADC_ConfigChannel+0x222>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe ff76 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	e01e      	b.n	800221c <HAL_ADC_ConfigChannel+0x260>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe ff6b 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e004      	b.n	800221a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x278>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	e018      	b.n	8002266 <HAL_ADC_ConfigChannel+0x2aa>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800224c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800225c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe ff3a 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff1e 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x2e8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff13 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	e01e      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x326>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2102      	movs	r1, #2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe ff08 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e004      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x33e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0e9b      	lsrs	r3, r3, #26
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	e016      	b.n	8002328 <HAL_ADC_ConfigChannel+0x36c>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800230c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e004      	b.n	8002328 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800231e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2102      	movs	r1, #2
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fed9 	bl	80010ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2103      	movs	r1, #3
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe febd 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x3aa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2103      	movs	r1, #3
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe feb2 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	e017      	b.n	8002396 <HAL_ADC_ConfigChannel+0x3da>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2103      	movs	r1, #3
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fea7 	bl	80010c0 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800237e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002380:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800238c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x3f2>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e011      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x416>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e003      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d106      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	2103      	movs	r1, #3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fe84 	bl	80010ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f803 	bl	80013f4 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 813d 	bne.w	8002670 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f7fe ff54 	bl	80012b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4aa2      	ldr	r2, [pc, #648]	@ (8002698 <HAL_ADC_ConfigChannel+0x6dc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 812e 	bne.w	8002670 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_ADC_ConfigChannel+0x480>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2b09      	cmp	r3, #9
 8002432:	bf94      	ite	ls
 8002434:	2301      	movls	r3, #1
 8002436:	2300      	movhi	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e019      	b.n	8002470 <HAL_ADC_ConfigChannel+0x4b4>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800244a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800244e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2b09      	cmp	r3, #9
 8002468:	bf94      	ite	ls
 800246a:	2301      	movls	r3, #1
 800246c:	2300      	movhi	r3, #0
 800246e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	2b00      	cmp	r3, #0
 8002472:	d079      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x4d4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800248e:	e015      	b.n	80024bc <HAL_ADC_ConfigChannel+0x500>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800249e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x520>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	e017      	b.n	800250c <HAL_ADC_ConfigChannel+0x550>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80024f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x576>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	e018      	b.n	8002564 <HAL_ADC_ConfigChannel+0x5a8>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800254e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	430b      	orrs	r3, r1
 8002566:	e07e      	b.n	8002666 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x5c8>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	069b      	lsls	r3, r3, #26
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002582:	e015      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x5f4>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x614>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	e017      	b.n	8002600 <HAL_ADC_ConfigChannel+0x644>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	61fb      	str	r3, [r7, #28]
  return result;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	ea42 0103 	orr.w	r1, r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_ADC_ConfigChannel+0x670>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	3b1e      	subs	r3, #30
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800262a:	e01b      	b.n	8002664 <HAL_ADC_ConfigChannel+0x6a8>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	613b      	str	r3, [r7, #16]
  return result;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 021f 	and.w	r2, r3, #31
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	3b1e      	subs	r3, #30
 800265e:	051b      	lsls	r3, r3, #20
 8002660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fdf4 	bl	8001258 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_ADC_ConfigChannel+0x6e0>)
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80be 	beq.w	80027fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x6d6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x6ec>
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002694:	e009      	b.n	80026aa <HAL_ADC_ConfigChannel+0x6ee>
 8002696:	bf00      	nop
 8002698:	407f0000 	.word	0x407f0000
 800269c:	80080000 	.word	0x80080000
 80026a0:	50000100 	.word	0x50000100
 80026a4:	50000300 	.word	0x50000300
 80026a8:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fcd6 	bl	800105c <LL_ADC_GetCommonPathInternalCh>
 80026b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_ADC_ConfigChannel+0x858>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x70c>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a55      	ldr	r2, [pc, #340]	@ (8002818 <HAL_ADC_ConfigChannel+0x85c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d13a      	bne.n	800273e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d134      	bne.n	800273e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026dc:	d005      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x72e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4e      	ldr	r2, [pc, #312]	@ (800281c <HAL_ADC_ConfigChannel+0x860>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f040 8085 	bne.w	80027f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x742>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a49      	ldr	r2, [pc, #292]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x746>
 80026fe:	4a49      	ldr	r2, [pc, #292]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x748>
 8002702:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 8002704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002708:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7fe fc91 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002714:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_ADC_ConfigChannel+0x86c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	4a44      	ldr	r2, [pc, #272]	@ (800282c <HAL_ADC_ConfigChannel+0x870>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800272e:	e002      	b.n	8002736 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3b01      	subs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273c:	e05a      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_ADC_ConfigChannel+0x874>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d125      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800274c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11f      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d104      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x7ac>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_ADC_ConfigChannel+0x878>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d047      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_ConfigChannel+0x7c0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x7c4>
 800277c:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 800277e:	e000      	b.n	8002782 <HAL_ADC_ConfigChannel+0x7c6>
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f7fe fc52 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002792:	e031      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_ADC_ConfigChannel+0x87c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12d      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d127      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x80c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_ADC_ConfigChannel+0x864>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x810>
 80027c8:	4a16      	ldr	r2, [pc, #88]	@ (8002824 <HAL_ADC_ConfigChannel+0x868>)
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x812>
 80027cc:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_ADC_ConfigChannel+0x854>)
 80027ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7fe fc2c 	bl	8001036 <LL_ADC_SetCommonPathInternalCh>
 80027de:	e00c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f4:	bf00      	nop
 80027f6:	e000      	b.n	80027fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002802:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002806:	4618      	mov	r0, r3
 8002808:	37d8      	adds	r7, #216	@ 0xd8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	50000700 	.word	0x50000700
 8002814:	c3210000 	.word	0xc3210000
 8002818:	90c00010 	.word	0x90c00010
 800281c:	50000600 	.word	0x50000600
 8002820:	50000100 	.word	0x50000100
 8002824:	50000300 	.word	0x50000300
 8002828:	20000004 	.word	0x20000004
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	c7520000 	.word	0xc7520000
 8002834:	50000500 	.word	0x50000500
 8002838:	cb840000 	.word	0xcb840000

0800283c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fdd1 	bl	80013f4 <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d176      	bne.n	8002946 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <ADC_Enable+0x114>)
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	f043 0210 	orr.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e062      	b.n	8002948 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fda0 	bl	80013cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002894:	d004      	beq.n	80028a0 <ADC_Enable+0x64>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2e      	ldr	r2, [pc, #184]	@ (8002954 <ADC_Enable+0x118>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <ADC_Enable+0x68>
 80028a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <ADC_Enable+0x11c>)
 80028a2:	e000      	b.n	80028a6 <ADC_Enable+0x6a>
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <ADC_Enable+0x120>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fbd8 	bl	800105c <LL_ADC_GetCommonPathInternalCh>
 80028ac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d013      	beq.n	80028de <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002960 <ADC_Enable+0x124>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	4a29      	ldr	r2, [pc, #164]	@ (8002964 <ADC_Enable+0x128>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028d0:	e002      	b.n	80028d8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028de:	f7fe fb8b 	bl	8000ff8 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028e4:	e028      	b.n	8002938 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fd82 	bl	80013f4 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fd66 	bl	80013cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002900:	f7fe fb7a 	bl	8000ff8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d914      	bls.n	8002938 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d00d      	beq.n	8002938 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f043 0210 	orr.w	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d1cf      	bne.n	80028e6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	8000003f 	.word	0x8000003f
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	50000700 	.word	0x50000700
 8002960:	20000004 	.word	0x20000004
 8002964:	053e2d63 	.word	0x053e2d63

08002968 <LL_ADC_IsEnabled>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <LL_ADC_IsEnabled+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_ADC_IsEnabled+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_REG_IsConversionOngoing>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b0a1      	sub	sp, #132	@ 0x84
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0e7      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a42:	2300      	movs	r3, #0
 8002a44:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a4e:	d102      	bne.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a50:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	e009      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a60:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	e001      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0be      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff7f 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a90:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff79 	bl	800298e <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80a0 	bne.w	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 809c 	bne.w	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a55      	ldr	r2, [pc, #340]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ac4:	4b56      	ldr	r3, [pc, #344]	@ (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002ac6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d04b      	beq.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ad0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ae2:	035b      	lsls	r3, r3, #13
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af4:	d004      	beq.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a45      	ldr	r2, [pc, #276]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10f      	bne.n	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b04:	f7ff ff30 	bl	8002968 <LL_ADC_IsEnabled>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	4841      	ldr	r0, [pc, #260]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b0c:	f7ff ff2c 	bl	8002968 <LL_ADC_IsEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4323      	orrs	r3, r4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e012      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b20:	483c      	ldr	r0, [pc, #240]	@ (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b22:	f7ff ff21 	bl	8002968 <LL_ADC_IsEnabled>
 8002b26:	4604      	mov	r4, r0
 8002b28:	483b      	ldr	r0, [pc, #236]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b2a:	f7ff ff1d 	bl	8002968 <LL_ADC_IsEnabled>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	431c      	orrs	r4, r3
 8002b32:	483c      	ldr	r0, [pc, #240]	@ (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b34:	f7ff ff18 	bl	8002968 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d056      	beq.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b52:	f023 030f 	bic.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6892      	ldr	r2, [r2, #8]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	431a      	orrs	r2, r3
 8002b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b64:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b66:	e047      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a23      	ldr	r2, [pc, #140]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b88:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b8c:	f7ff feec 	bl	8002968 <LL_ADC_IsEnabled>
 8002b90:	4604      	mov	r4, r0
 8002b92:	481f      	ldr	r0, [pc, #124]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b94:	f7ff fee8 	bl	8002968 <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e012      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ba8:	481a      	ldr	r0, [pc, #104]	@ (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002baa:	f7ff fedd 	bl	8002968 <LL_ADC_IsEnabled>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4819      	ldr	r0, [pc, #100]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bb2:	f7ff fed9 	bl	8002968 <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	431c      	orrs	r4, r3
 8002bba:	481a      	ldr	r0, [pc, #104]	@ (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bbc:	f7ff fed4 	bl	8002968 <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bda:	f023 030f 	bic.w	r3, r3, #15
 8002bde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002be0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be2:	e009      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bf6:	e000      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3784      	adds	r7, #132	@ 0x84
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	50000100 	.word	0x50000100
 8002c14:	50000400 	.word	0x50000400
 8002c18:	50000500 	.word	0x50000500
 8002c1c:	50000300 	.word	0x50000300
 8002c20:	50000700 	.word	0x50000700
 8002c24:	50000600 	.word	0x50000600

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	@ (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff40 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff90 	bl	8002d1c <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5f 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff33 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffa4 	bl	8002d84 <SysTick_Config>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002e46:	b480      	push	{r7}
 8002e48:	b087      	sub	sp, #28
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]
      break;
 8002e64:	e005      	b.n	8002e72 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e70:	bf00      	nop
  }

  return status;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e003      	b.n	8002e9c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_EXTI_IRQHandler+0x5c>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4798      	blx	r3
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40010414 	.word	0x40010414

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f16:	e15a      	b.n	80031ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 814c 	beq.w	80031c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d130      	bne.n	8002faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f7e:	2201      	movs	r2, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0201 	and.w	r2, r3, #1
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d017      	beq.n	8002fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d123      	bne.n	800303a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	08da      	lsrs	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	6939      	ldr	r1, [r7, #16]
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0203 	and.w	r2, r3, #3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a6 	beq.w	80031c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307c:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <HAL_GPIO_Init+0x2e4>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003080:	4a5a      	ldr	r2, [pc, #360]	@ (80031ec <HAL_GPIO_Init+0x2e4>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6613      	str	r3, [r2, #96]	@ 0x60
 8003088:	4b58      	ldr	r3, [pc, #352]	@ (80031ec <HAL_GPIO_Init+0x2e4>)
 800308a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003094:	4a56      	ldr	r2, [pc, #344]	@ (80031f0 <HAL_GPIO_Init+0x2e8>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030be:	d01f      	beq.n	8003100 <HAL_GPIO_Init+0x1f8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_GPIO_Init+0x2ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d019      	beq.n	80030fc <HAL_GPIO_Init+0x1f4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <HAL_GPIO_Init+0x2f0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_GPIO_Init+0x1f0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a4a      	ldr	r2, [pc, #296]	@ (80031fc <HAL_GPIO_Init+0x2f4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00d      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a49      	ldr	r2, [pc, #292]	@ (8003200 <HAL_GPIO_Init+0x2f8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a48      	ldr	r2, [pc, #288]	@ (8003204 <HAL_GPIO_Init+0x2fc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030e8:	2305      	movs	r3, #5
 80030ea:	e00a      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030ec:	2306      	movs	r3, #6
 80030ee:	e008      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_Init+0x1fa>
 8003100:	2300      	movs	r3, #0
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003112:	4937      	ldr	r1, [pc, #220]	@ (80031f0 <HAL_GPIO_Init+0x2e8>)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003120:	4b39      	ldr	r3, [pc, #228]	@ (8003208 <HAL_GPIO_Init+0x300>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003144:	4a30      	ldr	r2, [pc, #192]	@ (8003208 <HAL_GPIO_Init+0x300>)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800314a:	4b2f      	ldr	r3, [pc, #188]	@ (8003208 <HAL_GPIO_Init+0x300>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800316e:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_GPIO_Init+0x300>)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003174:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <HAL_GPIO_Init+0x300>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003198:	4a1b      	ldr	r2, [pc, #108]	@ (8003208 <HAL_GPIO_Init+0x300>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800319e:	4b1a      	ldr	r3, [pc, #104]	@ (8003208 <HAL_GPIO_Init+0x300>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031c2:	4a11      	ldr	r2, [pc, #68]	@ (8003208 <HAL_GPIO_Init+0x300>)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3301      	adds	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f ae9d 	bne.w	8002f18 <HAL_GPIO_Init+0x10>
  }
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48001000 	.word	0x48001000
 8003204:	48001400 	.word	0x48001400
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	e001      	b.n	800322e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003258:	e002      	b.n	8003260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d141      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800327a:	4b4b      	ldr	r3, [pc, #300]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003286:	d131      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003288:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800328e:	4a46      	ldr	r2, [pc, #280]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003298:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a0:	4a41      	ldr	r2, [pc, #260]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a8:	4b40      	ldr	r3, [pc, #256]	@ (80033ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2232      	movs	r2, #50	@ 0x32
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	0c9b      	lsrs	r3, r3, #18
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	e002      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c6:	4b38      	ldr	r3, [pc, #224]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d2:	d102      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f2      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032da:	4b33      	ldr	r3, [pc, #204]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d158      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e057      	b.n	800339c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ec:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f2:	4a2d      	ldr	r2, [pc, #180]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032fc:	e04d      	b.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003304:	d141      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003306:	4b28      	ldr	r3, [pc, #160]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003312:	d131      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003314:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800331a:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003324:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2232      	movs	r2, #50	@ 0x32
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	0c9b      	lsrs	r3, r3, #18
 8003346:	3301      	adds	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800334a:	e002      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003352:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335e:	d102      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f2      	bne.n	800334c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003366:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d112      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e011      	b.n	800339c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337e:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003388:	e007      	b.n	800339a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003392:	4a05      	ldr	r2, [pc, #20]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003398:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40007000 	.word	0x40007000
 80033ac:	20000004 	.word	0x20000004
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a04      	ldr	r2, [pc, #16]	@ (80033d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033c2:	6093      	str	r3, [r2, #8]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e2fe      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d075      	beq.n	80034de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4b97      	ldr	r3, [pc, #604]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4b94      	ldr	r3, [pc, #592]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0x3e>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d002      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b8d      	ldr	r3, [pc, #564]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2d9      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x74>
 800343a:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a84      	ldr	r2, [pc, #528]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b7f      	ldr	r3, [pc, #508]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7e      	ldr	r2, [pc, #504]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b7c      	ldr	r3, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7b      	ldr	r2, [pc, #492]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 800346c:	4b78      	ldr	r3, [pc, #480]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a77      	ldr	r2, [pc, #476]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b75      	ldr	r3, [pc, #468]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a74      	ldr	r2, [pc, #464]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fdb4 	bl	8000ff8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fd fdb0 	bl	8000ff8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e29e      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xc0>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fda0 	bl	8000ff8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fd fd9c 	bl	8000ff8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e28a      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d075      	beq.n	80035d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ea:	4b59      	ldr	r3, [pc, #356]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d102      	bne.n	800350a <HAL_RCC_OscConfig+0x136>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d002      	beq.n	8003510 <HAL_RCC_OscConfig+0x13c>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11f      	bne.n	8003550 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003510:	4b4f      	ldr	r3, [pc, #316]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_OscConfig+0x154>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e25d      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4946      	ldr	r1, [pc, #280]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800353c:	4b45      	ldr	r3, [pc, #276]	@ (8003654 <HAL_RCC_OscConfig+0x280>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd fd0d 	bl	8000f60 <HAL_InitTick>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d043      	beq.n	80035d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e249      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b3d      	ldr	r3, [pc, #244]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3c      	ldr	r2, [pc, #240]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fd fd48 	bl	8000ff8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356c:	f7fd fd44 	bl	8000ff8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e232      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	492d      	ldr	r1, [pc, #180]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	e01a      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fd fd24 	bl	8000ff8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fd fd20 	bl	8000ff8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e20e      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c6:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1e0>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d041      	beq.n	8003666 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01c      	beq.n	8003624 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f0:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fcfd 	bl	8000ff8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003602:	f7fd fcf9 	bl	8000ff8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1e7      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ef      	beq.n	8003602 <HAL_RCC_OscConfig+0x22e>
 8003622:	e020      	b.n	8003666 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003624:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800362a:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd fce0 	bl	8000ff8 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800363a:	e00d      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7fd fcdc 	bl	8000ff8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d906      	bls.n	8003658 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1ca      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	4b8c      	ldr	r3, [pc, #560]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ea      	bne.n	800363c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003678:	4b84      	ldr	r3, [pc, #528]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x2b4>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x2b6>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b7f      	ldr	r3, [pc, #508]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	4a7e      	ldr	r2, [pc, #504]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	@ 0x58
 800369a:	4b7c      	ldr	r3, [pc, #496]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	4b79      	ldr	r3, [pc, #484]	@ (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d118      	bne.n	80036e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b6:	4b76      	ldr	r3, [pc, #472]	@ (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	@ (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7fd fc99 	bl	8000ff8 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fd fc95 	bl	8000ff8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e183      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003890 <HAL_RCC_OscConfig+0x4bc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d108      	bne.n	8003702 <HAL_RCC_OscConfig+0x32e>
 80036f0:	4b66      	ldr	r3, [pc, #408]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	4a65      	ldr	r2, [pc, #404]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003700:	e024      	b.n	800374c <HAL_RCC_OscConfig+0x378>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d110      	bne.n	800372c <HAL_RCC_OscConfig+0x358>
 800370a:	4b60      	ldr	r3, [pc, #384]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	4a5e      	ldr	r2, [pc, #376]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800371a:	4b5c      	ldr	r3, [pc, #368]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003720:	4a5a      	ldr	r2, [pc, #360]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800372a:	e00f      	b.n	800374c <HAL_RCC_OscConfig+0x378>
 800372c:	4b57      	ldr	r3, [pc, #348]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003732:	4a56      	ldr	r2, [pc, #344]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd fc50 	bl	8000ff8 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fd fc4c 	bl	8000ff8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e138      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	4b46      	ldr	r3, [pc, #280]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ed      	beq.n	800375c <HAL_RCC_OscConfig+0x388>
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fd fc39 	bl	8000ff8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fc35 	bl	8000ff8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e121      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	4b3a      	ldr	r3, [pc, #232]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ed      	bne.n	800378a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b35      	ldr	r3, [pc, #212]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	4a34      	ldr	r2, [pc, #208]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03c      	beq.n	8003846 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01c      	beq.n	800380e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d4:	4b2d      	ldr	r3, [pc, #180]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037da:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fc08 	bl	8000ff8 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ec:	f7fd fc04 	bl	8000ff8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0f2      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fe:	4b23      	ldr	r3, [pc, #140]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <HAL_RCC_OscConfig+0x418>
 800380c:	e01b      	b.n	8003846 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800380e:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003814:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd fbeb 	bl	8000ff8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003826:	f7fd fbe7 	bl	8000ff8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0d5      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ef      	bne.n	8003826 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80c9 	beq.w	80039e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f000 8083 	beq.w	8003964 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d15e      	bne.n	8003924 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a08      	ldr	r2, [pc, #32]	@ (800388c <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fbc1 	bl	8000ff8 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	e00c      	b.n	8003894 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd fbbd 	bl	8000ff8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d905      	bls.n	8003894 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0ab      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	4b55      	ldr	r3, [pc, #340]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ec      	bne.n	800387a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a0:	4b52      	ldr	r3, [pc, #328]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4b52      	ldr	r3, [pc, #328]	@ (80039f0 <HAL_RCC_OscConfig+0x61c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a11      	ldr	r1, [r2, #32]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038ba:	0212      	lsls	r2, r2, #8
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038c2:	0852      	lsrs	r2, r2, #1
 80038c4:	3a01      	subs	r2, #1
 80038c6:	0552      	lsls	r2, r2, #21
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0652      	lsls	r2, r2, #25
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038da:	06d2      	lsls	r2, r2, #27
 80038dc:	430a      	orrs	r2, r1
 80038de:	4943      	ldr	r1, [pc, #268]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b41      	ldr	r3, [pc, #260]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a40      	ldr	r2, [pc, #256]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f0:	4b3e      	ldr	r3, [pc, #248]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a3d      	ldr	r2, [pc, #244]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fb7c 	bl	8000ff8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fb78 	bl	8000ff8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e066      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	4b35      	ldr	r3, [pc, #212]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x530>
 8003922:	e05e      	b.n	80039e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a30      	ldr	r2, [pc, #192]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 800392a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800392e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fb62 	bl	8000ff8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd fb5e 	bl	8000ff8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e04c      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	4924      	ldr	r1, [pc, #144]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCC_OscConfig+0x620>)
 800395e:	4013      	ands	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
 8003962:	e03e      	b.n	80039e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e039      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003970:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_RCC_OscConfig+0x618>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0203 	and.w	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d12c      	bne.n	80039de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	3b01      	subs	r3, #1
 8003990:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d123      	bne.n	80039de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d11b      	bne.n	80039de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d113      	bne.n	80039de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d109      	bne.n	80039de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	019f800c 	.word	0x019f800c
 80039f4:	feeefffc 	.word	0xfeeefffc

080039f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e11e      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b91      	ldr	r3, [pc, #580]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d910      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 020f 	bic.w	r2, r3, #15
 8003a26:	498c      	ldr	r1, [pc, #560]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b8a      	ldr	r3, [pc, #552]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e106      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d073      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d129      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a54:	4b81      	ldr	r3, [pc, #516]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0f4      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a64:	f000 f99e 	bl	8003da4 <RCC_GetSysClockFreqFromPLLSource>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c60 <HAL_RCC_ClockConfig+0x268>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d93f      	bls.n	8003af2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a72:	4b7a      	ldr	r3, [pc, #488]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d033      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d12f      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a92:	4b72      	ldr	r3, [pc, #456]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a9a:	4a70      	ldr	r2, [pc, #448]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e024      	b.n	8003af2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0c6      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac0:	4b66      	ldr	r3, [pc, #408]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0be      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ad0:	f000 f8ce 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4a61      	ldr	r2, [pc, #388]	@ (8003c60 <HAL_RCC_ClockConfig+0x268>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d909      	bls.n	8003af2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ade:	4b5f      	ldr	r3, [pc, #380]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ae6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4957      	ldr	r1, [pc, #348]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fd fa78 	bl	8000ff8 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fa74 	bl	8000ff8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e095      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b4e      	ldr	r3, [pc, #312]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d023      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b4c:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a42      	ldr	r2, [pc, #264]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b64:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b39      	ldr	r3, [pc, #228]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4936      	ldr	r1, [pc, #216]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b80      	cmp	r3, #128	@ 0x80
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b8e:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4a32      	ldr	r2, [pc, #200]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003b94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d21d      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 020f 	bic.w	r2, r3, #15
 8003bb0:	4929      	ldr	r1, [pc, #164]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fa1e 	bl	8000ff8 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd fa1a 	bl	8000ff8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e03b      	b.n	8003c4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1ed      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4917      	ldr	r1, [pc, #92]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0e:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	490f      	ldr	r1, [pc, #60]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c22:	f000 f825 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	490c      	ldr	r1, [pc, #48]	@ (8003c64 <HAL_RCC_ClockConfig+0x26c>)
 8003c34:	5ccb      	ldrb	r3, [r1, r3]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <HAL_RCC_ClockConfig+0x270>)
 8003c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_RCC_ClockConfig+0x274>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd f98a 	bl	8000f60 <HAL_InitTick>
 8003c4c:	4603      	mov	r3, r0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	04c4b400 	.word	0x04c4b400
 8003c64:	08007a54 	.word	0x08007a54
 8003c68:	20000004 	.word	0x20000004
 8003c6c:	2000001c 	.word	0x2000001c

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c76:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e047      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c94:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	e03e      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c9a:	4b23      	ldr	r3, [pc, #140]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d136      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cce:	68d2      	ldr	r2, [r2, #12]
 8003cd0:	0a12      	lsrs	r2, r2, #8
 8003cd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
      break;
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cde:	4a13      	ldr	r2, [pc, #76]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	0a12      	lsrs	r2, r2, #8
 8003cec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
      break;
 8003cf6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0e5b      	lsrs	r3, r3, #25
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e001      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d18:	693b      	ldr	r3, [r7, #16]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	016e3600 	.word	0x016e3600

08003d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000004 	.word	0x20000004

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08007a64 	.word	0x08007a64

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d7c:	f7ff ffda 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0adb      	lsrs	r3, r3, #11
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08007a64 	.word	0x08007a64

08003da4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d10c      	bne.n	8003de2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dc8:	4a17      	ldr	r2, [pc, #92]	@ (8003e28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd2:	68d2      	ldr	r2, [r2, #12]
 8003dd4:	0a12      	lsrs	r2, r2, #8
 8003dd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]
    break;
 8003de0:	e00c      	b.n	8003dfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de2:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	4a0e      	ldr	r2, [pc, #56]	@ (8003e24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dec:	68d2      	ldr	r2, [r2, #12]
 8003dee:	0a12      	lsrs	r2, r2, #8
 8003df0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
    break;
 8003dfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	0e5b      	lsrs	r3, r3, #25
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e16:	687b      	ldr	r3, [r7, #4]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40021000 	.word	0x40021000
 8003e28:	016e3600 	.word	0x016e3600
 8003e2c:	00f42400 	.word	0x00f42400

08003e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e38:	2300      	movs	r3, #0
 8003e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8098 	beq.w	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b40      	ldr	r3, [pc, #256]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	4a3f      	ldr	r2, [pc, #252]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a39      	ldr	r2, [pc, #228]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e86:	f7fd f8b7 	bl	8000ff8 <HAL_GetTick>
 8003e8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fd f8b3 	bl	8000ff8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea2:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ef      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d159      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d019      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed0:	4b23      	ldr	r3, [pc, #140]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003edc:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd f873 	bl	8000ff8 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f14:	e00b      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd f86f 	bl	8000ff8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f2c:	e006      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ec      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	4903      	ldr	r1, [pc, #12]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f58:	e008      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
 8003f5e:	e005      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6c:	7c7b      	ldrb	r3, [r7, #17]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4ba7      	ldr	r3, [pc, #668]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f76:	4aa6      	ldr	r2, [pc, #664]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8a:	4ba1      	ldr	r3, [pc, #644]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f023 0203 	bic.w	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	499d      	ldr	r1, [pc, #628]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fac:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f023 020c 	bic.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4995      	ldr	r1, [pc, #596]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fce:	4b90      	ldr	r3, [pc, #576]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	498c      	ldr	r1, [pc, #560]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff0:	4b87      	ldr	r3, [pc, #540]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	4984      	ldr	r1, [pc, #528]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004012:	4b7f      	ldr	r3, [pc, #508]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	497b      	ldr	r1, [pc, #492]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004034:	4b76      	ldr	r3, [pc, #472]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	4973      	ldr	r1, [pc, #460]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004056:	4b6e      	ldr	r3, [pc, #440]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	496a      	ldr	r1, [pc, #424]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004078:	4b65      	ldr	r3, [pc, #404]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4962      	ldr	r1, [pc, #392]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800409a:	4b5d      	ldr	r3, [pc, #372]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	4959      	ldr	r1, [pc, #356]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040bc:	4b54      	ldr	r3, [pc, #336]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c2:	f023 0203 	bic.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	4951      	ldr	r1, [pc, #324]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040de:	4b4c      	ldr	r3, [pc, #304]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	4948      	ldr	r1, [pc, #288]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d015      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004100:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	4940      	ldr	r1, [pc, #256]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411e:	d105      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a3a      	ldr	r2, [pc, #232]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004138:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004146:	4932      	ldr	r1, [pc, #200]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004156:	d105      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004158:	4b2d      	ldr	r3, [pc, #180]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a2c      	ldr	r2, [pc, #176]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004162:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417e:	4924      	ldr	r1, [pc, #144]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800418e:	d105      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004190:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800419a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d015      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b6:	4916      	ldr	r1, [pc, #88]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a10      	ldr	r2, [pc, #64]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	4908      	ldr	r1, [pc, #32]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a02      	ldr	r2, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004220:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	4926      	ldr	r1, [pc, #152]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004240:	4b21      	ldr	r3, [pc, #132]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a20      	ldr	r2, [pc, #128]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004266:	4918      	ldr	r1, [pc, #96]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004278:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004290:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004292:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429e:	490a      	ldr	r1, [pc, #40]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000

080042cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e042      	b.n	8004364 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f83b 	bl	800436c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2224      	movs	r2, #36	@ 0x24
 80042fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb2e 	bl	8004978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f82f 	bl	8004380 <UART_SetConfig>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e01b      	b.n	8004364 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800433a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800434a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fbad 	bl	8004abc <UART_CheckIdleState>
 8004362:	4603      	mov	r3, r0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b08c      	sub	sp, #48	@ 0x30
 8004386:	af00      	add	r7, sp, #0
 8004388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	431a      	orrs	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	431a      	orrs	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4baa      	ldr	r3, [pc, #680]	@ (8004658 <UART_SetConfig+0x2d8>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a9f      	ldr	r2, [pc, #636]	@ (800465c <UART_SetConfig+0x2dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004400:	430b      	orrs	r3, r1
 8004402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	f023 010f 	bic.w	r1, r3, #15
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a90      	ldr	r2, [pc, #576]	@ (8004660 <UART_SetConfig+0x2e0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d125      	bne.n	8004470 <UART_SetConfig+0xf0>
 8004424:	4b8f      	ldr	r3, [pc, #572]	@ (8004664 <UART_SetConfig+0x2e4>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d81a      	bhi.n	8004468 <UART_SetConfig+0xe8>
 8004432:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <UART_SetConfig+0xb8>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004459 	.word	0x08004459
 8004440:	08004451 	.word	0x08004451
 8004444:	08004461 	.word	0x08004461
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444e:	e116      	b.n	800467e <UART_SetConfig+0x2fe>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004456:	e112      	b.n	800467e <UART_SetConfig+0x2fe>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445e:	e10e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004466:	e10a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446e:	e106      	b.n	800467e <UART_SetConfig+0x2fe>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7c      	ldr	r2, [pc, #496]	@ (8004668 <UART_SetConfig+0x2e8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d138      	bne.n	80044ec <UART_SetConfig+0x16c>
 800447a:	4b7a      	ldr	r3, [pc, #488]	@ (8004664 <UART_SetConfig+0x2e4>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d82d      	bhi.n	80044e4 <UART_SetConfig+0x164>
 8004488:	a201      	add	r2, pc, #4	@ (adr r2, 8004490 <UART_SetConfig+0x110>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080044e5 	.word	0x080044e5
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044cd 	.word	0x080044cd
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ca:	e0d8      	b.n	800467e <UART_SetConfig+0x2fe>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d2:	e0d4      	b.n	800467e <UART_SetConfig+0x2fe>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e0d0      	b.n	800467e <UART_SetConfig+0x2fe>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e0cc      	b.n	800467e <UART_SetConfig+0x2fe>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e0c8      	b.n	800467e <UART_SetConfig+0x2fe>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5e      	ldr	r2, [pc, #376]	@ (800466c <UART_SetConfig+0x2ec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d125      	bne.n	8004542 <UART_SetConfig+0x1c2>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004664 <UART_SetConfig+0x2e4>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004500:	2b30      	cmp	r3, #48	@ 0x30
 8004502:	d016      	beq.n	8004532 <UART_SetConfig+0x1b2>
 8004504:	2b30      	cmp	r3, #48	@ 0x30
 8004506:	d818      	bhi.n	800453a <UART_SetConfig+0x1ba>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d00a      	beq.n	8004522 <UART_SetConfig+0x1a2>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d814      	bhi.n	800453a <UART_SetConfig+0x1ba>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <UART_SetConfig+0x19a>
 8004514:	2b10      	cmp	r3, #16
 8004516:	d008      	beq.n	800452a <UART_SetConfig+0x1aa>
 8004518:	e00f      	b.n	800453a <UART_SetConfig+0x1ba>
 800451a:	2300      	movs	r3, #0
 800451c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004520:	e0ad      	b.n	800467e <UART_SetConfig+0x2fe>
 8004522:	2302      	movs	r3, #2
 8004524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004528:	e0a9      	b.n	800467e <UART_SetConfig+0x2fe>
 800452a:	2304      	movs	r3, #4
 800452c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004530:	e0a5      	b.n	800467e <UART_SetConfig+0x2fe>
 8004532:	2308      	movs	r3, #8
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004538:	e0a1      	b.n	800467e <UART_SetConfig+0x2fe>
 800453a:	2310      	movs	r3, #16
 800453c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004540:	e09d      	b.n	800467e <UART_SetConfig+0x2fe>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <UART_SetConfig+0x2f0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d125      	bne.n	8004598 <UART_SetConfig+0x218>
 800454c:	4b45      	ldr	r3, [pc, #276]	@ (8004664 <UART_SetConfig+0x2e4>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004556:	2bc0      	cmp	r3, #192	@ 0xc0
 8004558:	d016      	beq.n	8004588 <UART_SetConfig+0x208>
 800455a:	2bc0      	cmp	r3, #192	@ 0xc0
 800455c:	d818      	bhi.n	8004590 <UART_SetConfig+0x210>
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d00a      	beq.n	8004578 <UART_SetConfig+0x1f8>
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d814      	bhi.n	8004590 <UART_SetConfig+0x210>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <UART_SetConfig+0x1f0>
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0x200>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x210>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e082      	b.n	800467e <UART_SetConfig+0x2fe>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e07e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e07a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e076      	b.n	800467e <UART_SetConfig+0x2fe>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e072      	b.n	800467e <UART_SetConfig+0x2fe>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a35      	ldr	r2, [pc, #212]	@ (8004674 <UART_SetConfig+0x2f4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d12a      	bne.n	80045f8 <UART_SetConfig+0x278>
 80045a2:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <UART_SetConfig+0x2e4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b0:	d01a      	beq.n	80045e8 <UART_SetConfig+0x268>
 80045b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0x270>
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045bc:	d00c      	beq.n	80045d8 <UART_SetConfig+0x258>
 80045be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c2:	d815      	bhi.n	80045f0 <UART_SetConfig+0x270>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0x250>
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045cc:	d008      	beq.n	80045e0 <UART_SetConfig+0x260>
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x270>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d6:	e052      	b.n	800467e <UART_SetConfig+0x2fe>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045de:	e04e      	b.n	800467e <UART_SetConfig+0x2fe>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	e04a      	b.n	800467e <UART_SetConfig+0x2fe>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e046      	b.n	800467e <UART_SetConfig+0x2fe>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f6:	e042      	b.n	800467e <UART_SetConfig+0x2fe>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	@ (800465c <UART_SetConfig+0x2dc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d13a      	bne.n	8004678 <UART_SetConfig+0x2f8>
 8004602:	4b18      	ldr	r3, [pc, #96]	@ (8004664 <UART_SetConfig+0x2e4>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800460c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004610:	d01a      	beq.n	8004648 <UART_SetConfig+0x2c8>
 8004612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004616:	d81b      	bhi.n	8004650 <UART_SetConfig+0x2d0>
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800461c:	d00c      	beq.n	8004638 <UART_SetConfig+0x2b8>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004622:	d815      	bhi.n	8004650 <UART_SetConfig+0x2d0>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <UART_SetConfig+0x2b0>
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462c:	d008      	beq.n	8004640 <UART_SetConfig+0x2c0>
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x2d0>
 8004630:	2300      	movs	r3, #0
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004636:	e022      	b.n	800467e <UART_SetConfig+0x2fe>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800463e:	e01e      	b.n	800467e <UART_SetConfig+0x2fe>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004646:	e01a      	b.n	800467e <UART_SetConfig+0x2fe>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800464e:	e016      	b.n	800467e <UART_SetConfig+0x2fe>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004656:	e012      	b.n	800467e <UART_SetConfig+0x2fe>
 8004658:	cfff69f3 	.word	0xcfff69f3
 800465c:	40008000 	.word	0x40008000
 8004660:	40013800 	.word	0x40013800
 8004664:	40021000 	.word	0x40021000
 8004668:	40004400 	.word	0x40004400
 800466c:	40004800 	.word	0x40004800
 8004670:	40004c00 	.word	0x40004c00
 8004674:	40005000 	.word	0x40005000
 8004678:	2310      	movs	r3, #16
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4aae      	ldr	r2, [pc, #696]	@ (800493c <UART_SetConfig+0x5bc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	f040 8097 	bne.w	80047b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800468e:	2b08      	cmp	r3, #8
 8004690:	d823      	bhi.n	80046da <UART_SetConfig+0x35a>
 8004692:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <UART_SetConfig+0x318>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046cb 	.word	0x080046cb
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046db 	.word	0x080046db
 80046b8:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7ff fb46 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80046c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004940 <UART_SetConfig+0x5c0>)
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7ff fad1 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 80046ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8130 	beq.w	800494e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	4a94      	ldr	r2, [pc, #592]	@ (8004944 <UART_SetConfig+0x5c4>)
 80046f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004700:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	429a      	cmp	r2, r3
 8004710:	d305      	bcc.n	800471e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d903      	bls.n	8004726 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004724:	e113      	b.n	800494e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	2200      	movs	r2, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	4a84      	ldr	r2, [pc, #528]	@ (8004944 <UART_SetConfig+0x5c4>)
 8004734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004738:	b29b      	uxth	r3, r3
 800473a:	2200      	movs	r2, #0
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004744:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004748:	f7fb fd6a 	bl	8000220 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	020b      	lsls	r3, r1, #8
 800475e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004762:	0202      	lsls	r2, r0, #8
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	6849      	ldr	r1, [r1, #4]
 8004768:	0849      	lsrs	r1, r1, #1
 800476a:	2000      	movs	r0, #0
 800476c:	460c      	mov	r4, r1
 800476e:	4605      	mov	r5, r0
 8004770:	eb12 0804 	adds.w	r8, r2, r4
 8004774:	eb43 0905 	adc.w	r9, r3, r5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	469a      	mov	sl, r3
 8004780:	4693      	mov	fp, r2
 8004782:	4652      	mov	r2, sl
 8004784:	465b      	mov	r3, fp
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f7fb fd49 	bl	8000220 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4613      	mov	r3, r2
 8004794:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800479c:	d308      	bcc.n	80047b0 <UART_SetConfig+0x430>
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a4:	d204      	bcs.n	80047b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e0ce      	b.n	800494e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047b6:	e0ca      	b.n	800494e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c0:	d166      	bne.n	8004890 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x49a>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0x450>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7ff faaa 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80047f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7ff fabc 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8004800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b4e      	ldr	r3, [pc, #312]	@ (8004940 <UART_SetConfig+0x5c0>)
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7ff fa31 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 800480e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8090 	beq.w	800494e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	4a44      	ldr	r2, [pc, #272]	@ (8004944 <UART_SetConfig+0x5c4>)
 8004834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004838:	461a      	mov	r2, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004840:	005a      	lsls	r2, r3, #1
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	441a      	add	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d916      	bls.n	8004888 <UART_SetConfig+0x508>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004860:	d212      	bcs.n	8004888 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b29a      	uxth	r2, r3
 8004878:	8bfb      	ldrh	r3, [r7, #30]
 800487a:	4313      	orrs	r3, r2
 800487c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	8bfa      	ldrh	r2, [r7, #30]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e062      	b.n	800494e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800488e:	e05e      	b.n	800494e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004890:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004894:	2b08      	cmp	r3, #8
 8004896:	d828      	bhi.n	80048ea <UART_SetConfig+0x56a>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0x520>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048eb 	.word	0x080048eb
 80048b0:	080048db 	.word	0x080048db
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	080048eb 	.word	0x080048eb
 80048bc:	080048eb 	.word	0x080048eb
 80048c0:	080048e3 	.word	0x080048e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7ff fa42 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80048c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7ff fa54 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 80048d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <UART_SetConfig+0x5c0>)
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7ff f9c9 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 80048de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048e8:	e005      	b.n	80048f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048f4:	bf00      	nop
    }

    if (pclk != 0U)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d028      	beq.n	800494e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	4a10      	ldr	r2, [pc, #64]	@ (8004944 <UART_SetConfig+0x5c4>)
 8004902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004906:	461a      	mov	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	fbb3 f2f2 	udiv	r2, r3, r2
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	441a      	add	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d910      	bls.n	8004948 <UART_SetConfig+0x5c8>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d20c      	bcs.n	8004948 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	b29a      	uxth	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x5ce>
 800493a:	bf00      	nop
 800493c:	40008000 	.word	0x40008000
 8004940:	00f42400 	.word	0x00f42400
 8004944:	08007a70 	.word	0x08007a70
      }
      else
      {
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2201      	movs	r2, #1
 8004952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2201      	movs	r2, #1
 800495a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2200      	movs	r2, #0
 8004968:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800496a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	@ 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01a      	beq.n	8004a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a76:	d10a      	bne.n	8004a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b098      	sub	sp, #96	@ 0x60
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004acc:	f7fc fa94 	bl	8000ff8 <HAL_GetTick>
 8004ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d12f      	bne.n	8004b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f88e 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d022      	beq.n	8004b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e063      	b.n	8004c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d149      	bne.n	8004be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b56:	2200      	movs	r2, #0
 8004b58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f857 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d03c      	beq.n	8004be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e6      	bne.n	8004b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bba:	61fa      	str	r2, [r7, #28]
 8004bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e012      	b.n	8004c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3758      	adds	r7, #88	@ 0x58
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	e04f      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d04b      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fc f9e5 	bl	8000ff8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e04e      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d037      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d034      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b40      	cmp	r3, #64	@ 0x40
 8004c5c:	d031      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d110      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2208      	movs	r2, #8
 8004c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f838 	bl	8004cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e029      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9c:	d111      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f81e 	bl	8004cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00f      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0a0      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b095      	sub	sp, #84	@ 0x54
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e3      	bne.n	8004d24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d118      	bne.n	8004d96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0310 	bic.w	r3, r3, #16
 8004d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004daa:	bf00      	nop
 8004dac:	3754      	adds	r7, #84	@ 0x54
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <__NVIC_SetPriority>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	@ (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	@ (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e10:	2100      	movs	r1, #0
 8004e12:	f06f 0004 	mvn.w	r0, #4
 8004e16:	f7ff ffcf 	bl	8004db8 <__NVIC_SetPriority>
#endif
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e26:	f3ef 8305 	mrs	r3, IPSR
 8004e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e32:	f06f 0305 	mvn.w	r3, #5
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	e00c      	b.n	8004e54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <osKernelInitialize+0x44>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <osKernelInitialize+0x44>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	e002      	b.n	8004e54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e54:	687b      	ldr	r3, [r7, #4]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000174 	.word	0x20000174

08004e68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6e:	f3ef 8305 	mrs	r3, IPSR
 8004e72:	603b      	str	r3, [r7, #0]
  return(result);
 8004e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e7a:	f06f 0305 	mvn.w	r3, #5
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	e010      	b.n	8004ea4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e82:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <osKernelStart+0x48>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d109      	bne.n	8004e9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e8a:	f7ff ffbf 	bl	8004e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <osKernelStart+0x48>)
 8004e90:	2202      	movs	r2, #2
 8004e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e94:	f001 f87a 	bl	8005f8c <vTaskStartScheduler>
      stat = osOK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	e002      	b.n	8004ea4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ea4:	687b      	ldr	r3, [r7, #4]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000174 	.word	0x20000174

08004eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	@ 0x38
 8004eb8:	af04      	add	r7, sp, #16
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec4:	f3ef 8305 	mrs	r3, IPSR
 8004ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d17e      	bne.n	8004fce <osThreadNew+0x11a>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d07b      	beq.n	8004fce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004eda:	2318      	movs	r3, #24
 8004edc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d045      	beq.n	8004f7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <osThreadNew+0x48>
        name = attr->name;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <osThreadNew+0x6e>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b38      	cmp	r3, #56	@ 0x38
 8004f14:	d805      	bhi.n	8004f22 <osThreadNew+0x6e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <osThreadNew+0x72>
        return (NULL);
 8004f22:	2300      	movs	r3, #0
 8004f24:	e054      	b.n	8004fd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <osThreadNew+0xa8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f44:	d90a      	bls.n	8004f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d006      	beq.n	8004f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <osThreadNew+0xa8>
        mem = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	e010      	b.n	8004f7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10c      	bne.n	8004f7e <osThreadNew+0xca>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <osThreadNew+0xca>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <osThreadNew+0xca>
          mem = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e001      	b.n	8004f7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d110      	bne.n	8004fa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f8c:	9202      	str	r2, [sp, #8]
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fe1a 	bl	8005bd4 <xTaskCreateStatic>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e013      	b.n	8004fce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d110      	bne.n	8004fce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fe68 	bl	8005c94 <xTaskCreate>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <osThreadNew+0x11a>
            hTask = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fce:	693b      	ldr	r3, [r7, #16]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3728      	adds	r7, #40	@ 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe0:	f3ef 8305 	mrs	r3, IPSR
 8004fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <osDelay+0x1c>
    stat = osErrorISR;
 8004fec:	f06f 0305 	mvn.w	r3, #5
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e007      	b.n	8005004 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 ff8e 	bl	8005f20 <vTaskDelay>
    }
  }

  return (stat);
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a07      	ldr	r2, [pc, #28]	@ (800503c <vApplicationGetIdleTaskMemory+0x2c>)
 8005020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a06      	ldr	r2, [pc, #24]	@ (8005040 <vApplicationGetIdleTaskMemory+0x30>)
 8005026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000178 	.word	0x20000178
 8005040:	200001d4 	.word	0x200001d4

08005044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a07      	ldr	r2, [pc, #28]	@ (8005070 <vApplicationGetTimerTaskMemory+0x2c>)
 8005054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a06      	ldr	r2, [pc, #24]	@ (8005074 <vApplicationGetTimerTaskMemory+0x30>)
 800505a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	200003d4 	.word	0x200003d4
 8005074:	20000430 	.word	0x20000430

08005078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 0208 	add.w	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f103 0208 	add.w	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d103      	bne.n	800513a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e00c      	b.n	8005154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3308      	adds	r3, #8
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e002      	b.n	8005148 <vListInsert+0x2e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d2f6      	bcs.n	8005142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6892      	ldr	r2, [r2, #8]
 80051a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6852      	ldr	r2, [r2, #4]
 80051ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d103      	bne.n	80051c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800520c:	f002 f87c 	bl	8007308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	3b01      	subs	r3, #1
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	441a      	add	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	22ff      	movs	r2, #255	@ 0xff
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d114      	bne.n	800528c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3310      	adds	r3, #16
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f91a 	bl	80064a8 <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <xQueueGenericReset+0xd0>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	e009      	b.n	80052a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3310      	adds	r3, #16
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fef1 	bl	8005078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3324      	adds	r3, #36	@ 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff feec 	bl	8005078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052a0:	f002 f864 	bl	800736c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052a4:	2301      	movs	r3, #1
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	@ 0x38
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <xQueueGenericCreateStatic+0x56>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <xQueueGenericCreateStatic+0x5a>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueGenericCreateStatic+0x5c>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10b      	bne.n	800532c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	623b      	str	r3, [r7, #32]
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	e7fd      	b.n	8005328 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <xQueueGenericCreateStatic+0x84>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <xQueueGenericCreateStatic+0x88>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <xQueueGenericCreateStatic+0x8a>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61fb      	str	r3, [r7, #28]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800535a:	2350      	movs	r3, #80	@ 0x50
 800535c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b50      	cmp	r3, #80	@ 0x50
 8005362:	d00b      	beq.n	800537c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	61bb      	str	r3, [r7, #24]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800537c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005390:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f805 	bl	80053ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3730      	adds	r7, #48	@ 0x30
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053dc:	2101      	movs	r1, #1
 80053de:	69b8      	ldr	r0, [r7, #24]
 80053e0:	f7ff fefe 	bl	80051e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08e      	sub	sp, #56	@ 0x38
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005402:	2300      	movs	r3, #0
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <xQueueGenericSend+0x34>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <xQueueGenericSend+0x42>
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xQueueGenericSend+0x46>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueGenericSend+0x48>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <xQueueGenericSend+0x64>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x72>
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <xQueueGenericSend+0x76>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <xQueueGenericSend+0x78>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xQueueGenericSend+0x94>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	623b      	str	r3, [r7, #32]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005488:	f001 f9ce 	bl	8006828 <xTaskGetSchedulerState>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <xQueueGenericSend+0xa4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <xQueueGenericSend+0xa8>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <xQueueGenericSend+0xaa>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <xQueueGenericSend+0xc6>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	61fb      	str	r3, [r7, #28]
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	e7fd      	b.n	80054b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ba:	f001 ff25 	bl	8007308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <xQueueGenericSend+0xdc>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d129      	bne.n	8005524 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054d6:	f000 fa0f 	bl	80058f8 <prvCopyDataToQueue>
 80054da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	3324      	adds	r3, #36	@ 0x24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 ffdd 	bl	80064a8 <xTaskRemoveFromEventList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054f4:	4b3f      	ldr	r3, [pc, #252]	@ (80055f4 <xQueueGenericSend+0x200>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	e00a      	b.n	800551c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800550c:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <xQueueGenericSend+0x200>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800551c:	f001 ff26 	bl	800736c <vPortExitCritical>
				return pdPASS;
 8005520:	2301      	movs	r3, #1
 8005522:	e063      	b.n	80055ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800552a:	f001 ff1f 	bl	800736c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800552e:	2300      	movs	r3, #0
 8005530:	e05c      	b.n	80055ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f817 	bl	8006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005546:	f001 ff11 	bl	800736c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800554a:	f000 fd87 	bl	800605c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800554e:	f001 fedb 	bl	8007308 <vPortEnterCritical>
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005558:	b25b      	sxtb	r3, r3
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d103      	bne.n	8005568 <xQueueGenericSend+0x174>
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x18a>
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800557e:	f001 fef5 	bl	800736c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005582:	1d3a      	adds	r2, r7, #4
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f806 	bl	800659c <xTaskCheckForTimeOut>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d124      	bne.n	80055e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005598:	f000 faa6 	bl	8005ae8 <prvIsQueueFull>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	3310      	adds	r3, #16
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 ff2a 	bl	8006404 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055b2:	f000 fa31 	bl	8005a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055b6:	f000 fd5f 	bl	8006078 <xTaskResumeAll>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f af7c 	bne.w	80054ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055c2:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <xQueueGenericSend+0x200>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	e772      	b.n	80054ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055d6:	f000 fa1f 	bl	8005a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055da:	f000 fd4d 	bl	8006078 <xTaskResumeAll>
 80055de:	e76c      	b.n	80054ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055e2:	f000 fa19 	bl	8005a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055e6:	f000 fd47 	bl	8006078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3738      	adds	r7, #56	@ 0x38
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b090      	sub	sp, #64	@ 0x40
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <xQueueGenericSendFromISR+0x3e>
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <xQueueGenericSendFromISR+0x42>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSendFromISR+0x44>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d103      	bne.n	8005666 <xQueueGenericSendFromISR+0x6e>
 800565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <xQueueGenericSendFromISR+0x72>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueGenericSendFromISR+0x74>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	623b      	str	r3, [r7, #32]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005688:	f001 ff1e 	bl	80074c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800568c:	f3ef 8211 	mrs	r2, BASEPRI
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	61fa      	str	r2, [r7, #28]
 80056a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <xQueueGenericSendFromISR+0xc2>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d12f      	bne.n	800571a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056d0:	f000 f912 	bl	80058f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d112      	bne.n	8005704 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	3324      	adds	r3, #36	@ 0x24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fedc 	bl	80064a8 <xTaskRemoveFromEventList>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00e      	beq.n	8005714 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e007      	b.n	8005714 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005704:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005708:	3301      	adds	r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	b25a      	sxtb	r2, r3
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005714:	2301      	movs	r3, #1
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005718:	e001      	b.n	800571e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
 800571c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800572a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	@ 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08c      	sub	sp, #48	@ 0x30
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <xQueueReceive+0x32>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	623b      	str	r3, [r7, #32]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <xQueueReceive+0x40>
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <xQueueReceive+0x44>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <xQueueReceive+0x46>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xQueueReceive+0x62>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61fb      	str	r3, [r7, #28]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005796:	f001 f847 	bl	8006828 <xTaskGetSchedulerState>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <xQueueReceive+0x72>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <xQueueReceive+0x76>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueReceive+0x78>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <xQueueReceive+0x94>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61bb      	str	r3, [r7, #24]
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057c8:	f001 fd9e 	bl	8007308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01f      	beq.n	8005818 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057dc:	f000 f8f6 	bl	80059cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	3310      	adds	r3, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fe57 	bl	80064a8 <xTaskRemoveFromEventList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005800:	4b3c      	ldr	r3, [pc, #240]	@ (80058f4 <xQueueReceive+0x1c0>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005810:	f001 fdac 	bl	800736c <vPortExitCritical>
				return pdPASS;
 8005814:	2301      	movs	r3, #1
 8005816:	e069      	b.n	80058ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800581e:	f001 fda5 	bl	800736c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005822:	2300      	movs	r3, #0
 8005824:	e062      	b.n	80058ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fe9d 	bl	8006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800583a:	f001 fd97 	bl	800736c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800583e:	f000 fc0d 	bl	800605c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005842:	f001 fd61 	bl	8007308 <vPortEnterCritical>
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800584c:	b25b      	sxtb	r3, r3
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d103      	bne.n	800585c <xQueueReceive+0x128>
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005862:	b25b      	sxtb	r3, r3
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d103      	bne.n	8005872 <xQueueReceive+0x13e>
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005872:	f001 fd7b 	bl	800736c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005876:	1d3a      	adds	r2, r7, #4
 8005878:	f107 0310 	add.w	r3, r7, #16
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fe8c 	bl	800659c <xTaskCheckForTimeOut>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d123      	bne.n	80058d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800588a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800588c:	f000 f916 	bl	8005abc <prvIsQueueEmpty>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	3324      	adds	r3, #36	@ 0x24
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fdb0 	bl	8006404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a6:	f000 f8b7 	bl	8005a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058aa:	f000 fbe5 	bl	8006078 <xTaskResumeAll>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d189      	bne.n	80057c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058b4:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <xQueueReceive+0x1c0>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	e780      	b.n	80057c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c8:	f000 f8a6 	bl	8005a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058cc:	f000 fbd4 	bl	8006078 <xTaskResumeAll>
 80058d0:	e77a      	b.n	80057c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d4:	f000 f8a0 	bl	8005a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058d8:	f000 fbce 	bl	8006078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058de:	f000 f8ed 	bl	8005abc <prvIsQueueEmpty>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f43f af6f 	beq.w	80057c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3730      	adds	r7, #48	@ 0x30
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d14d      	bne.n	80059ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 ff9e 	bl	8006864 <xTaskPriorityDisinherit>
 8005928:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	e043      	b.n	80059ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d119      	bne.n	800596c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6858      	ldr	r0, [r3, #4]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	461a      	mov	r2, r3
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	f002 f81c 	bl	8007980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	d32b      	bcc.n	80059ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	e026      	b.n	80059ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68d8      	ldr	r0, [r3, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	f002 f802 	bl	8007980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	425b      	negs	r3, r3
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d207      	bcs.n	80059a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	425b      	negs	r3, r3
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d105      	bne.n	80059ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059c2:	697b      	ldr	r3, [r7, #20]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d018      	beq.n	8005a10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	441a      	add	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d303      	bcc.n	8005a00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68d9      	ldr	r1, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6838      	ldr	r0, [r7, #0]
 8005a0c:	f001 ffb8 	bl	8007980 <memcpy>
	}
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a20:	f001 fc72 	bl	8007308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a2c:	e011      	b.n	8005a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d012      	beq.n	8005a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3324      	adds	r3, #36	@ 0x24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fd34 	bl	80064a8 <xTaskRemoveFromEventList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a46:	f000 fe0d 	bl	8006664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dce9      	bgt.n	8005a2e <prvUnlockQueue+0x16>
 8005a5a:	e000      	b.n	8005a5e <prvUnlockQueue+0x46>
					break;
 8005a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	22ff      	movs	r2, #255	@ 0xff
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a66:	f001 fc81 	bl	800736c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a6a:	f001 fc4d 	bl	8007308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a76:	e011      	b.n	8005a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d012      	beq.n	8005aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3310      	adds	r3, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fd0f 	bl	80064a8 <xTaskRemoveFromEventList>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a90:	f000 fde8 	bl	8006664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dce9      	bgt.n	8005a78 <prvUnlockQueue+0x60>
 8005aa4:	e000      	b.n	8005aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	22ff      	movs	r2, #255	@ 0xff
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ab0:	f001 fc5c 	bl	800736c <vPortExitCritical>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ac4:	f001 fc20 	bl	8007308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e001      	b.n	8005ada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ada:	f001 fc47 	bl	800736c <vPortExitCritical>

	return xReturn;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af0:	f001 fc0a 	bl	8007308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d102      	bne.n	8005b06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e001      	b.n	8005b0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b0a:	f001 fc2f 	bl	800736c <vPortExitCritical>

	return xReturn;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e014      	b.n	8005b52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b28:	4a0f      	ldr	r2, [pc, #60]	@ (8005b68 <vQueueAddToRegistry+0x50>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b34:	490c      	ldr	r1, [pc, #48]	@ (8005b68 <vQueueAddToRegistry+0x50>)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b68 <vQueueAddToRegistry+0x50>)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b4a:	e006      	b.n	8005b5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b07      	cmp	r3, #7
 8005b56:	d9e7      	bls.n	8005b28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000830 	.word	0x20000830

08005b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b7c:	f001 fbc4 	bl	8007308 <vPortEnterCritical>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d103      	bne.n	8005b96 <vQueueWaitForMessageRestricted+0x2a>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d103      	bne.n	8005bac <vQueueWaitForMessageRestricted+0x40>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bac:	f001 fbde 	bl	800736c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3324      	adds	r3, #36	@ 0x24
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fc45 	bl	8006450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bc6:	6978      	ldr	r0, [r7, #20]
 8005bc8:	f7ff ff26 	bl	8005a18 <prvUnlockQueue>
	}
 8005bcc:	bf00      	nop
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af04      	add	r7, sp, #16
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	623b      	str	r3, [r7, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	61fb      	str	r3, [r7, #28]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c1e:	235c      	movs	r3, #92	@ 0x5c
 8005c20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c26:	d00b      	beq.n	8005c40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61bb      	str	r3, [r7, #24]
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01e      	beq.n	8005c86 <xTaskCreateStatic+0xb2>
 8005c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01b      	beq.n	8005c86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c60:	2300      	movs	r3, #0
 8005c62:	9303      	str	r3, [sp, #12]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	9302      	str	r3, [sp, #8]
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f850 	bl	8005d1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c80:	f000 f8de 	bl	8005e40 <prvAddNewTaskToReadyList>
 8005c84:	e001      	b.n	8005c8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c8a:	697b      	ldr	r3, [r7, #20]
	}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	@ 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	@ 0x30
 8005c98:	af04      	add	r7, sp, #16
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fc4f 	bl	800754c <pvPortMalloc>
 8005cae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00e      	beq.n	8005cd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cb6:	205c      	movs	r0, #92	@ 0x5c
 8005cb8:	f001 fc48 	bl	800754c <pvPortMalloc>
 8005cbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cca:	e005      	b.n	8005cd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ccc:	6978      	ldr	r0, [r7, #20]
 8005cce:	f001 fd0b 	bl	80076e8 <vPortFree>
 8005cd2:	e001      	b.n	8005cd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9303      	str	r3, [sp, #12]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f80e 	bl	8005d1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d02:	69f8      	ldr	r0, [r7, #28]
 8005d04:	f000 f89c 	bl	8005e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e002      	b.n	8005d14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d14:	69bb      	ldr	r3, [r7, #24]
	}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b088      	sub	sp, #32
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	461a      	mov	r2, r3
 8005d36:	21a5      	movs	r1, #165	@ 0xa5
 8005d38:	f001 fdf6 	bl	8007928 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d46:	3b01      	subs	r3, #1
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f023 0307 	bic.w	r3, r3, #7
 8005d54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	617b      	str	r3, [r7, #20]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01f      	beq.n	8005dbe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e012      	b.n	8005daa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	7819      	ldrb	r1, [r3, #0]
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	3334      	adds	r3, #52	@ 0x34
 8005d94:	460a      	mov	r2, r1
 8005d96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	3301      	adds	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d9e9      	bls.n	8005d84 <prvInitialiseNewTask+0x66>
 8005db0:	e000      	b.n	8005db4 <prvInitialiseNewTask+0x96>
			{
				break;
 8005db2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dbc:	e003      	b.n	8005dc6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	2b37      	cmp	r3, #55	@ 0x37
 8005dca:	d901      	bls.n	8005dd0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dcc:	2337      	movs	r3, #55	@ 0x37
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dda:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	2200      	movs	r2, #0
 8005de0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff f966 	bl	80050b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	3318      	adds	r3, #24
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff f961 	bl	80050b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	2200      	movs	r2, #0
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f001 f93e 	bl	80070a0 <pxPortInitialiseStack>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e36:	bf00      	nop
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e48:	f001 fa5e 	bl	8007308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f04 <prvAddNewTaskToReadyList+0xc4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a2c      	ldr	r2, [pc, #176]	@ (8005f04 <prvAddNewTaskToReadyList+0xc4>)
 8005e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e56:	4b2c      	ldr	r3, [pc, #176]	@ (8005f08 <prvAddNewTaskToReadyList+0xc8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005f08 <prvAddNewTaskToReadyList+0xc8>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e64:	4b27      	ldr	r3, [pc, #156]	@ (8005f04 <prvAddNewTaskToReadyList+0xc4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d110      	bne.n	8005e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e6c:	f000 fc1e 	bl	80066ac <prvInitialiseTaskLists>
 8005e70:	e00d      	b.n	8005e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e72:	4b26      	ldr	r3, [pc, #152]	@ (8005f0c <prvAddNewTaskToReadyList+0xcc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e7a:	4b23      	ldr	r3, [pc, #140]	@ (8005f08 <prvAddNewTaskToReadyList+0xc8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d802      	bhi.n	8005e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e88:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <prvAddNewTaskToReadyList+0xc8>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e8e:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <prvAddNewTaskToReadyList+0xd0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <prvAddNewTaskToReadyList+0xd0>)
 8005e96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e98:	4b1d      	ldr	r3, [pc, #116]	@ (8005f10 <prvAddNewTaskToReadyList+0xd0>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <prvAddNewTaskToReadyList+0xd4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d903      	bls.n	8005eb4 <prvAddNewTaskToReadyList+0x74>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb0:	4a18      	ldr	r2, [pc, #96]	@ (8005f14 <prvAddNewTaskToReadyList+0xd4>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4a15      	ldr	r2, [pc, #84]	@ (8005f18 <prvAddNewTaskToReadyList+0xd8>)
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7ff f901 	bl	80050d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ed0:	f001 fa4c 	bl	800736c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <prvAddNewTaskToReadyList+0xcc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00e      	beq.n	8005efa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005edc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <prvAddNewTaskToReadyList+0xc8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d207      	bcs.n	8005efa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eea:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <prvAddNewTaskToReadyList+0xdc>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000d44 	.word	0x20000d44
 8005f08:	20000870 	.word	0x20000870
 8005f0c:	20000d50 	.word	0x20000d50
 8005f10:	20000d60 	.word	0x20000d60
 8005f14:	20000d4c 	.word	0x20000d4c
 8005f18:	20000874 	.word	0x20000874
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <vTaskDelay+0x64>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <vTaskDelay+0x32>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60bb      	str	r3, [r7, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f52:	f000 f883 	bl	800605c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fcf3 	bl	8006944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f5e:	f000 f88b 	bl	8006078 <xTaskResumeAll>
 8005f62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <vTaskDelay+0x68>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000d6c 	.word	0x20000d6c
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	@ 0x28
 8005f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	1d39      	adds	r1, r7, #4
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f834 	bl	8005010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	9202      	str	r2, [sp, #8]
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	460a      	mov	r2, r1
 8005fba:	4922      	ldr	r1, [pc, #136]	@ (8006044 <vTaskStartScheduler+0xb8>)
 8005fbc:	4822      	ldr	r0, [pc, #136]	@ (8006048 <vTaskStartScheduler+0xbc>)
 8005fbe:	f7ff fe09 	bl	8005bd4 <xTaskCreateStatic>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a21      	ldr	r2, [pc, #132]	@ (800604c <vTaskStartScheduler+0xc0>)
 8005fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fc8:	4b20      	ldr	r3, [pc, #128]	@ (800604c <vTaskStartScheduler+0xc0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e001      	b.n	8005fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fe0:	f000 fd04 	bl	80069ec <xTimerCreateTimerTask>
 8005fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d116      	bne.n	800601a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	613b      	str	r3, [r7, #16]
}
 8005ffe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006000:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <vTaskStartScheduler+0xc4>)
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006008:	4b12      	ldr	r3, [pc, #72]	@ (8006054 <vTaskStartScheduler+0xc8>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800600e:	4b12      	ldr	r3, [pc, #72]	@ (8006058 <vTaskStartScheduler+0xcc>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006014:	f001 f8d4 	bl	80071c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006018:	e00f      	b.n	800603a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d10b      	bne.n	800603a <vTaskStartScheduler+0xae>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60fb      	str	r3, [r7, #12]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <vTaskStartScheduler+0xaa>
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	080079d0 	.word	0x080079d0
 8006048:	0800667d 	.word	0x0800667d
 800604c:	20000d68 	.word	0x20000d68
 8006050:	20000d64 	.word	0x20000d64
 8006054:	20000d50 	.word	0x20000d50
 8006058:	20000d48 	.word	0x20000d48

0800605c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006060:	4b04      	ldr	r3, [pc, #16]	@ (8006074 <vTaskSuspendAll+0x18>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a03      	ldr	r2, [pc, #12]	@ (8006074 <vTaskSuspendAll+0x18>)
 8006068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000d6c 	.word	0x20000d6c

08006078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006086:	4b42      	ldr	r3, [pc, #264]	@ (8006190 <xTaskResumeAll+0x118>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	603b      	str	r3, [r7, #0]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060a6:	f001 f92f 	bl	8007308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060aa:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <xTaskResumeAll+0x118>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	4a37      	ldr	r2, [pc, #220]	@ (8006190 <xTaskResumeAll+0x118>)
 80060b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b4:	4b36      	ldr	r3, [pc, #216]	@ (8006190 <xTaskResumeAll+0x118>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d162      	bne.n	8006182 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060bc:	4b35      	ldr	r3, [pc, #212]	@ (8006194 <xTaskResumeAll+0x11c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05e      	beq.n	8006182 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c4:	e02f      	b.n	8006126 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c6:	4b34      	ldr	r3, [pc, #208]	@ (8006198 <xTaskResumeAll+0x120>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3318      	adds	r3, #24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff f85a 	bl	800518c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f855 	bl	800518c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e6:	4b2d      	ldr	r3, [pc, #180]	@ (800619c <xTaskResumeAll+0x124>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d903      	bls.n	80060f6 <xTaskResumeAll+0x7e>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	4a2a      	ldr	r2, [pc, #168]	@ (800619c <xTaskResumeAll+0x124>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a27      	ldr	r2, [pc, #156]	@ (80061a0 <xTaskResumeAll+0x128>)
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe ffe0 	bl	80050d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006116:	4b23      	ldr	r3, [pc, #140]	@ (80061a4 <xTaskResumeAll+0x12c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006120:	4b21      	ldr	r3, [pc, #132]	@ (80061a8 <xTaskResumeAll+0x130>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006126:	4b1c      	ldr	r3, [pc, #112]	@ (8006198 <xTaskResumeAll+0x120>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1cb      	bne.n	80060c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006134:	f000 fb58 	bl	80067e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006138:	4b1c      	ldr	r3, [pc, #112]	@ (80061ac <xTaskResumeAll+0x134>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006144:	f000 f846 	bl	80061d4 <xTaskIncrementTick>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800614e:	4b16      	ldr	r3, [pc, #88]	@ (80061a8 <xTaskResumeAll+0x130>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f1      	bne.n	8006144 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006160:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <xTaskResumeAll+0x134>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006166:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <xTaskResumeAll+0x130>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006172:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <xTaskResumeAll+0x138>)
 8006174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006182:	f001 f8f3 	bl	800736c <vPortExitCritical>

	return xAlreadyYielded;
 8006186:	68bb      	ldr	r3, [r7, #8]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000d6c 	.word	0x20000d6c
 8006194:	20000d44 	.word	0x20000d44
 8006198:	20000d04 	.word	0x20000d04
 800619c:	20000d4c 	.word	0x20000d4c
 80061a0:	20000874 	.word	0x20000874
 80061a4:	20000870 	.word	0x20000870
 80061a8:	20000d58 	.word	0x20000d58
 80061ac:	20000d54 	.word	0x20000d54
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061ba:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <xTaskGetTickCount+0x1c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061c0:	687b      	ldr	r3, [r7, #4]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000d48 	.word	0x20000d48

080061d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061de:	4b4f      	ldr	r3, [pc, #316]	@ (800631c <xTaskIncrementTick+0x148>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 8090 	bne.w	8006308 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006320 <xTaskIncrementTick+0x14c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006320 <xTaskIncrementTick+0x14c>)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d121      	bne.n	8006240 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061fc:	4b49      	ldr	r3, [pc, #292]	@ (8006324 <xTaskIncrementTick+0x150>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	603b      	str	r3, [r7, #0]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <xTaskIncrementTick+0x46>
 800621e:	4b41      	ldr	r3, [pc, #260]	@ (8006324 <xTaskIncrementTick+0x150>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4b40      	ldr	r3, [pc, #256]	@ (8006328 <xTaskIncrementTick+0x154>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3e      	ldr	r2, [pc, #248]	@ (8006324 <xTaskIncrementTick+0x150>)
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4a3e      	ldr	r2, [pc, #248]	@ (8006328 <xTaskIncrementTick+0x154>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b3e      	ldr	r3, [pc, #248]	@ (800632c <xTaskIncrementTick+0x158>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a3c      	ldr	r2, [pc, #240]	@ (800632c <xTaskIncrementTick+0x158>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	f000 fad4 	bl	80067e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006240:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d349      	bcc.n	80062de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b36      	ldr	r3, [pc, #216]	@ (8006324 <xTaskIncrementTick+0x150>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006254:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	601a      	str	r2, [r3, #0]
					break;
 800625c:	e03f      	b.n	80062de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <xTaskIncrementTick+0x150>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d203      	bcs.n	800627e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006276:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <xTaskIncrementTick+0x15c>)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800627c:	e02f      	b.n	80062de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe ff82 	bl	800518c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3318      	adds	r3, #24
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe ff79 	bl	800518c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629e:	4b25      	ldr	r3, [pc, #148]	@ (8006334 <xTaskIncrementTick+0x160>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d903      	bls.n	80062ae <xTaskIncrementTick+0xda>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	4a22      	ldr	r2, [pc, #136]	@ (8006334 <xTaskIncrementTick+0x160>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <xTaskIncrementTick+0x164>)
 80062bc:	441a      	add	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f7fe ff04 	bl	80050d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ce:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <xTaskIncrementTick+0x168>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3b8      	bcc.n	800624a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062dc:	e7b5      	b.n	800624a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062de:	4b17      	ldr	r3, [pc, #92]	@ (800633c <xTaskIncrementTick+0x168>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e4:	4914      	ldr	r1, [pc, #80]	@ (8006338 <xTaskIncrementTick+0x164>)
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d901      	bls.n	80062fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062fa:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <xTaskIncrementTick+0x16c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d007      	beq.n	8006312 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e004      	b.n	8006312 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006308:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <xTaskIncrementTick+0x170>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <xTaskIncrementTick+0x170>)
 8006310:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006312:	697b      	ldr	r3, [r7, #20]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000d6c 	.word	0x20000d6c
 8006320:	20000d48 	.word	0x20000d48
 8006324:	20000cfc 	.word	0x20000cfc
 8006328:	20000d00 	.word	0x20000d00
 800632c:	20000d5c 	.word	0x20000d5c
 8006330:	20000d64 	.word	0x20000d64
 8006334:	20000d4c 	.word	0x20000d4c
 8006338:	20000874 	.word	0x20000874
 800633c:	20000870 	.word	0x20000870
 8006340:	20000d58 	.word	0x20000d58
 8006344:	20000d54 	.word	0x20000d54

08006348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800634e:	4b28      	ldr	r3, [pc, #160]	@ (80063f0 <vTaskSwitchContext+0xa8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006356:	4b27      	ldr	r3, [pc, #156]	@ (80063f4 <vTaskSwitchContext+0xac>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800635c:	e042      	b.n	80063e4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800635e:	4b25      	ldr	r3, [pc, #148]	@ (80063f4 <vTaskSwitchContext+0xac>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006364:	4b24      	ldr	r3, [pc, #144]	@ (80063f8 <vTaskSwitchContext+0xb0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e011      	b.n	8006390 <vTaskSwitchContext+0x48>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <vTaskSwitchContext+0x42>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <vTaskSwitchContext+0x3e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b01      	subs	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	491a      	ldr	r1, [pc, #104]	@ (80063fc <vTaskSwitchContext+0xb4>)
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e3      	beq.n	800636c <vTaskSwitchContext+0x24>
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <vTaskSwitchContext+0xb4>)
 80063b0:	4413      	add	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3308      	adds	r3, #8
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d104      	bne.n	80063d4 <vTaskSwitchContext+0x8c>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4a09      	ldr	r2, [pc, #36]	@ (8006400 <vTaskSwitchContext+0xb8>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4a06      	ldr	r2, [pc, #24]	@ (80063f8 <vTaskSwitchContext+0xb0>)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000d6c 	.word	0x20000d6c
 80063f4:	20000d58 	.word	0x20000d58
 80063f8:	20000d4c 	.word	0x20000d4c
 80063fc:	20000874 	.word	0x20000874
 8006400:	20000870 	.word	0x20000870

08006404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60fb      	str	r3, [r7, #12]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800642c:	4b07      	ldr	r3, [pc, #28]	@ (800644c <vTaskPlaceOnEventList+0x48>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3318      	adds	r3, #24
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fe fe70 	bl	800511a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800643a:	2101      	movs	r1, #1
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f000 fa81 	bl	8006944 <prvAddCurrentTaskToDelayedList>
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000870 	.word	0x20000870

08006450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800647a:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3318      	adds	r3, #24
 8006480:	4619      	mov	r1, r3
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7fe fe25 	bl	80050d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f000 fa54 	bl	8006944 <prvAddCurrentTaskToDelayedList>
	}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000870 	.word	0x20000870

080064a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3318      	adds	r3, #24
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fe56 	bl	800518c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <xTaskRemoveFromEventList+0xb0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11d      	bne.n	8006524 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fe4d 	bl	800518c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f6:	4b19      	ldr	r3, [pc, #100]	@ (800655c <xTaskRemoveFromEventList+0xb4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d903      	bls.n	8006506 <xTaskRemoveFromEventList+0x5e>
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	4a16      	ldr	r2, [pc, #88]	@ (800655c <xTaskRemoveFromEventList+0xb4>)
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4a13      	ldr	r2, [pc, #76]	@ (8006560 <xTaskRemoveFromEventList+0xb8>)
 8006514:	441a      	add	r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f7fe fdd8 	bl	80050d2 <vListInsertEnd>
 8006522:	e005      	b.n	8006530 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3318      	adds	r3, #24
 8006528:	4619      	mov	r1, r3
 800652a:	480e      	ldr	r0, [pc, #56]	@ (8006564 <xTaskRemoveFromEventList+0xbc>)
 800652c:	f7fe fdd1 	bl	80050d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <xTaskRemoveFromEventList+0xc0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d905      	bls.n	800654a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006542:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <xTaskRemoveFromEventList+0xc4>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e001      	b.n	800654e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800654e:	697b      	ldr	r3, [r7, #20]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000d6c 	.word	0x20000d6c
 800655c:	20000d4c 	.word	0x20000d4c
 8006560:	20000874 	.word	0x20000874
 8006564:	20000d04 	.word	0x20000d04
 8006568:	20000870 	.word	0x20000870
 800656c:	20000d58 	.word	0x20000d58

08006570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006578:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <vTaskInternalSetTimeOutState+0x24>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <vTaskInternalSetTimeOutState+0x28>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000d5c 	.word	0x20000d5c
 8006598:	20000d48 	.word	0x20000d48

0800659c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	613b      	str	r3, [r7, #16]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065e2:	f000 fe91 	bl	8007308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065e6:	4b1d      	ldr	r3, [pc, #116]	@ (800665c <xTaskCheckForTimeOut+0xc0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d102      	bne.n	8006606 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e023      	b.n	800664e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <xTaskCheckForTimeOut+0xc4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d007      	beq.n	8006622 <xTaskCheckForTimeOut+0x86>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	e015      	b.n	800664e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	429a      	cmp	r2, r3
 800662a:	d20b      	bcs.n	8006644 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff99 	bl	8006570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e004      	b.n	800664e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800664a:	2301      	movs	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800664e:	f000 fe8d 	bl	800736c <vPortExitCritical>

	return xReturn;
 8006652:	69fb      	ldr	r3, [r7, #28]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3720      	adds	r7, #32
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000d48 	.word	0x20000d48
 8006660:	20000d5c 	.word	0x20000d5c

08006664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006668:	4b03      	ldr	r3, [pc, #12]	@ (8006678 <vTaskMissedYield+0x14>)
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20000d58 	.word	0x20000d58

0800667c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006684:	f000 f852 	bl	800672c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006688:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <prvIdleTask+0x28>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d9f9      	bls.n	8006684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006690:	4b05      	ldr	r3, [pc, #20]	@ (80066a8 <prvIdleTask+0x2c>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066a0:	e7f0      	b.n	8006684 <prvIdleTask+0x8>
 80066a2:	bf00      	nop
 80066a4:	20000874 	.word	0x20000874
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	e00c      	b.n	80066d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a12      	ldr	r2, [pc, #72]	@ (800670c <prvInitialiseTaskLists+0x60>)
 80066c4:	4413      	add	r3, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fcd6 	bl	8005078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3301      	adds	r3, #1
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b37      	cmp	r3, #55	@ 0x37
 80066d6:	d9ef      	bls.n	80066b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066d8:	480d      	ldr	r0, [pc, #52]	@ (8006710 <prvInitialiseTaskLists+0x64>)
 80066da:	f7fe fccd 	bl	8005078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066de:	480d      	ldr	r0, [pc, #52]	@ (8006714 <prvInitialiseTaskLists+0x68>)
 80066e0:	f7fe fcca 	bl	8005078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066e4:	480c      	ldr	r0, [pc, #48]	@ (8006718 <prvInitialiseTaskLists+0x6c>)
 80066e6:	f7fe fcc7 	bl	8005078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ea:	480c      	ldr	r0, [pc, #48]	@ (800671c <prvInitialiseTaskLists+0x70>)
 80066ec:	f7fe fcc4 	bl	8005078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066f0:	480b      	ldr	r0, [pc, #44]	@ (8006720 <prvInitialiseTaskLists+0x74>)
 80066f2:	f7fe fcc1 	bl	8005078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <prvInitialiseTaskLists+0x78>)
 80066f8:	4a05      	ldr	r2, [pc, #20]	@ (8006710 <prvInitialiseTaskLists+0x64>)
 80066fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <prvInitialiseTaskLists+0x7c>)
 80066fe:	4a05      	ldr	r2, [pc, #20]	@ (8006714 <prvInitialiseTaskLists+0x68>)
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000874 	.word	0x20000874
 8006710:	20000cd4 	.word	0x20000cd4
 8006714:	20000ce8 	.word	0x20000ce8
 8006718:	20000d04 	.word	0x20000d04
 800671c:	20000d18 	.word	0x20000d18
 8006720:	20000d30 	.word	0x20000d30
 8006724:	20000cfc 	.word	0x20000cfc
 8006728:	20000d00 	.word	0x20000d00

0800672c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006732:	e019      	b.n	8006768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006734:	f000 fde8 	bl	8007308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006738:	4b10      	ldr	r3, [pc, #64]	@ (800677c <prvCheckTasksWaitingTermination+0x50>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fd21 	bl	800518c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800674a:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <prvCheckTasksWaitingTermination+0x54>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3b01      	subs	r3, #1
 8006750:	4a0b      	ldr	r2, [pc, #44]	@ (8006780 <prvCheckTasksWaitingTermination+0x54>)
 8006752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006754:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <prvCheckTasksWaitingTermination+0x58>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3b01      	subs	r3, #1
 800675a:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <prvCheckTasksWaitingTermination+0x58>)
 800675c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800675e:	f000 fe05 	bl	800736c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f810 	bl	8006788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <prvCheckTasksWaitingTermination+0x58>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e1      	bne.n	8006734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000d18 	.word	0x20000d18
 8006780:	20000d44 	.word	0x20000d44
 8006784:	20000d2c 	.word	0x20000d2c

08006788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ffa2 	bl	80076e8 <vPortFree>
				vPortFree( pxTCB );
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 ff9f 	bl	80076e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067aa:	e019      	b.n	80067e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d103      	bne.n	80067be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 ff96 	bl	80076e8 <vPortFree>
	}
 80067bc:	e010      	b.n	80067e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d00b      	beq.n	80067e0 <prvDeleteTCB+0x58>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60fb      	str	r3, [r7, #12]
}
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	e7fd      	b.n	80067dc <prvDeleteTCB+0x54>
	}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <prvResetNextTaskUnblockTime+0x38>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <prvResetNextTaskUnblockTime+0x3c>)
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295
 80067fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006800:	e008      	b.n	8006814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006802:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <prvResetNextTaskUnblockTime+0x38>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a04      	ldr	r2, [pc, #16]	@ (8006824 <prvResetNextTaskUnblockTime+0x3c>)
 8006812:	6013      	str	r3, [r2, #0]
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	20000cfc 	.word	0x20000cfc
 8006824:	20000d64 	.word	0x20000d64

08006828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <xTaskGetSchedulerState+0x34>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006836:	2301      	movs	r3, #1
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	e008      	b.n	800684e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683c:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <xTaskGetSchedulerState+0x38>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006844:	2302      	movs	r3, #2
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	e001      	b.n	800684e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800684e:	687b      	ldr	r3, [r7, #4]
	}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000d50 	.word	0x20000d50
 8006860:	20000d6c 	.word	0x20000d6c

08006864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d058      	beq.n	800692c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800687a:	4b2f      	ldr	r3, [pc, #188]	@ (8006938 <xTaskPriorityDisinherit+0xd4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	429a      	cmp	r2, r3
 8006882:	d00b      	beq.n	800689c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	60fb      	str	r3, [r7, #12]
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	60bb      	str	r3, [r7, #8]
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c0:	1e5a      	subs	r2, r3, #1
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d02c      	beq.n	800692c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d128      	bne.n	800692c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3304      	adds	r3, #4
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fc54 	bl	800518c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fc:	4b0f      	ldr	r3, [pc, #60]	@ (800693c <xTaskPriorityDisinherit+0xd8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d903      	bls.n	800690c <xTaskPriorityDisinherit+0xa8>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <xTaskPriorityDisinherit+0xd8>)
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4a09      	ldr	r2, [pc, #36]	@ (8006940 <xTaskPriorityDisinherit+0xdc>)
 800691a:	441a      	add	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f7fe fbd5 	bl	80050d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800692c:	697b      	ldr	r3, [r7, #20]
	}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000870 	.word	0x20000870
 800693c:	20000d4c 	.word	0x20000d4c
 8006940:	20000874 	.word	0x20000874

08006944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800694e:	4b21      	ldr	r3, [pc, #132]	@ (80069d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006954:	4b20      	ldr	r3, [pc, #128]	@ (80069d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3304      	adds	r3, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fc16 	bl	800518c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d10a      	bne.n	800697e <prvAddCurrentTaskToDelayedList+0x3a>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696e:	4b1a      	ldr	r3, [pc, #104]	@ (80069d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4819      	ldr	r0, [pc, #100]	@ (80069dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006978:	f7fe fbab 	bl	80050d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800697c:	e026      	b.n	80069cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4413      	add	r3, r2
 8006984:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006986:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d209      	bcs.n	80069aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006996:	4b12      	ldr	r3, [pc, #72]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fbb9 	bl	800511a <vListInsert>
}
 80069a8:	e010      	b.n	80069cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069aa:	4b0e      	ldr	r3, [pc, #56]	@ (80069e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f7fe fbaf 	bl	800511a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069bc:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d202      	bcs.n	80069cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069c6:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000d48 	.word	0x20000d48
 80069d8:	20000870 	.word	0x20000870
 80069dc:	20000d30 	.word	0x20000d30
 80069e0:	20000d00 	.word	0x20000d00
 80069e4:	20000cfc 	.word	0x20000cfc
 80069e8:	20000d64 	.word	0x20000d64

080069ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	@ 0x28
 80069f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069f6:	f000 fb13 	bl	8007020 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006a70 <xTimerCreateTimerTask+0x84>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d021      	beq.n	8006a46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a0a:	1d3a      	adds	r2, r7, #4
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fb15 	bl	8005044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	9202      	str	r2, [sp, #8]
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	2302      	movs	r3, #2
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	460a      	mov	r2, r1
 8006a2c:	4911      	ldr	r1, [pc, #68]	@ (8006a74 <xTimerCreateTimerTask+0x88>)
 8006a2e:	4812      	ldr	r0, [pc, #72]	@ (8006a78 <xTimerCreateTimerTask+0x8c>)
 8006a30:	f7ff f8d0 	bl	8005bd4 <xTaskCreateStatic>
 8006a34:	4603      	mov	r3, r0
 8006a36:	4a11      	ldr	r2, [pc, #68]	@ (8006a7c <xTimerCreateTimerTask+0x90>)
 8006a38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a3a:	4b10      	ldr	r3, [pc, #64]	@ (8006a7c <xTimerCreateTimerTask+0x90>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	613b      	str	r3, [r7, #16]
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	e7fd      	b.n	8006a60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a64:	697b      	ldr	r3, [r7, #20]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000da0 	.word	0x20000da0
 8006a74:	080079d8 	.word	0x080079d8
 8006a78:	08006bb9 	.word	0x08006bb9
 8006a7c:	20000da4 	.word	0x20000da4

08006a80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	@ 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	623b      	str	r3, [r7, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ab0:	4b19      	ldr	r3, [pc, #100]	@ (8006b18 <xTimerGenericCommand+0x98>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02a      	beq.n	8006b0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	dc18      	bgt.n	8006afc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aca:	f7ff fead 	bl	8006828 <xTaskGetSchedulerState>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d109      	bne.n	8006ae8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ad4:	4b10      	ldr	r3, [pc, #64]	@ (8006b18 <xTimerGenericCommand+0x98>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	f107 0110 	add.w	r1, r7, #16
 8006adc:	2300      	movs	r3, #0
 8006ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae0:	f7fe fc88 	bl	80053f4 <xQueueGenericSend>
 8006ae4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ae6:	e012      	b.n	8006b0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <xTimerGenericCommand+0x98>)
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	f107 0110 	add.w	r1, r7, #16
 8006af0:	2300      	movs	r3, #0
 8006af2:	2200      	movs	r2, #0
 8006af4:	f7fe fc7e 	bl	80053f4 <xQueueGenericSend>
 8006af8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006afa:	e008      	b.n	8006b0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006afc:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <xTimerGenericCommand+0x98>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	f107 0110 	add.w	r1, r7, #16
 8006b04:	2300      	movs	r3, #0
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	f7fe fd76 	bl	80055f8 <xQueueGenericSendFromISR>
 8006b0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3728      	adds	r7, #40	@ 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000da0 	.word	0x20000da0

08006b1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b26:	4b23      	ldr	r3, [pc, #140]	@ (8006bb4 <prvProcessExpiredTimer+0x98>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe fb29 	bl	800518c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d023      	beq.n	8006b90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	18d1      	adds	r1, r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	6978      	ldr	r0, [r7, #20]
 8006b56:	f000 f8d5 	bl	8006d04 <prvInsertTimerInActiveList>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	2300      	movs	r3, #0
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6978      	ldr	r0, [r7, #20]
 8006b6c:	f7ff ff88 	bl	8006a80 <xTimerGenericCommand>
 8006b70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d114      	bne.n	8006ba2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	60fb      	str	r3, [r7, #12]
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	e7fd      	b.n	8006b8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b96:	f023 0301 	bic.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	6978      	ldr	r0, [r7, #20]
 8006ba8:	4798      	blx	r3
}
 8006baa:	bf00      	nop
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000d98 	.word	0x20000d98

08006bb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f859 	bl	8006c7c <prvGetNextExpireTime>
 8006bca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f805 	bl	8006be0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bd6:	f000 f8d7 	bl	8006d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bda:	bf00      	nop
 8006bdc:	e7f0      	b.n	8006bc0 <prvTimerTask+0x8>
	...

08006be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bea:	f7ff fa37 	bl	800605c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f866 	bl	8006cc4 <prvSampleTimeNow>
 8006bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d130      	bne.n	8006c62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <prvProcessTimerOrBlockTask+0x3c>
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d806      	bhi.n	8006c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c0e:	f7ff fa33 	bl	8006078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff81 	bl	8006b1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c1a:	e024      	b.n	8006c66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c22:	4b13      	ldr	r3, [pc, #76]	@ (8006c70 <prvProcessTimerOrBlockTask+0x90>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <prvProcessTimerOrBlockTask+0x50>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <prvProcessTimerOrBlockTask+0x52>
 8006c30:	2300      	movs	r3, #0
 8006c32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c34:	4b0f      	ldr	r3, [pc, #60]	@ (8006c74 <prvProcessTimerOrBlockTask+0x94>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7fe ff93 	bl	8005b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c46:	f7ff fa17 	bl	8006078 <xTaskResumeAll>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c50:	4b09      	ldr	r3, [pc, #36]	@ (8006c78 <prvProcessTimerOrBlockTask+0x98>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
}
 8006c60:	e001      	b.n	8006c66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c62:	f7ff fa09 	bl	8006078 <xTaskResumeAll>
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000d9c 	.word	0x20000d9c
 8006c74:	20000da0 	.word	0x20000da0
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c84:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <prvGetNextExpireTime+0x44>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <prvGetNextExpireTime+0x16>
 8006c8e:	2201      	movs	r2, #1
 8006c90:	e000      	b.n	8006c94 <prvGetNextExpireTime+0x18>
 8006c92:	2200      	movs	r2, #0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ca0:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <prvGetNextExpireTime+0x44>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e001      	b.n	8006cb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000d98 	.word	0x20000d98

08006cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ccc:	f7ff fa72 	bl	80061b4 <xTaskGetTickCount>
 8006cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <prvSampleTimeNow+0x3c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d205      	bcs.n	8006ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cdc:	f000 f93a 	bl	8006f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cee:	4a04      	ldr	r2, [pc, #16]	@ (8006d00 <prvSampleTimeNow+0x3c>)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000da8 	.word	0x20000da8

08006d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d812      	bhi.n	8006d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d302      	bcc.n	8006d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e01b      	b.n	8006d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d3e:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <prvInsertTimerInActiveList+0x7c>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7fe f9e6 	bl	800511a <vListInsert>
 8006d4e:	e012      	b.n	8006d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d206      	bcs.n	8006d66 <prvInsertTimerInActiveList+0x62>
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	e007      	b.n	8006d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d66:	4b07      	ldr	r3, [pc, #28]	@ (8006d84 <prvInsertTimerInActiveList+0x80>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7fe f9d2 	bl	800511a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d76:	697b      	ldr	r3, [r7, #20]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000d9c 	.word	0x20000d9c
 8006d84:	20000d98 	.word	0x20000d98

08006d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08e      	sub	sp, #56	@ 0x38
 8006d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d8e:	e0ce      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da19      	bge.n	8006dca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	3304      	adds	r3, #4
 8006d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10b      	bne.n	8006dba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	61fb      	str	r3, [r7, #28]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dc0:	6850      	ldr	r0, [r2, #4]
 8006dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dc4:	6892      	ldr	r2, [r2, #8]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f2c0 80ae 	blt.w	8006f2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe f9d2 	bl	800518c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006de8:	463b      	mov	r3, r7
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff ff6a 	bl	8006cc4 <prvSampleTimeNow>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	f200 8097 	bhi.w	8006f28 <prvProcessReceivedCommands+0x1a0>
 8006dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <prvProcessReceivedCommands+0x78>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e29 	.word	0x08006e29
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e9f 	.word	0x08006e9f
 8006e10:	08006eb3 	.word	0x08006eb3
 8006e14:	08006eff 	.word	0x08006eff
 8006e18:	08006e29 	.word	0x08006e29
 8006e1c:	08006e29 	.word	0x08006e29
 8006e20:	08006e9f 	.word	0x08006e9f
 8006e24:	08006eb3 	.word	0x08006eb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	18d1      	adds	r1, r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e48:	f7ff ff5c 	bl	8006d04 <prvInsertTimerInActiveList>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d06c      	beq.n	8006f2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d061      	beq.n	8006f2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	441a      	add	r2, r3
 8006e70:	2300      	movs	r3, #0
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2300      	movs	r3, #0
 8006e76:	2100      	movs	r1, #0
 8006e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e7a:	f7ff fe01 	bl	8006a80 <xTimerGenericCommand>
 8006e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d152      	bne.n	8006f2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	61bb      	str	r3, [r7, #24]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006eb0:	e03d      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	617b      	str	r3, [r7, #20]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	18d1      	adds	r1, r2, r3
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef8:	f7ff ff04 	bl	8006d04 <prvInsertTimerInActiveList>
					break;
 8006efc:	e017      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f0e:	f000 fbeb 	bl	80076e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f12:	e00c      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f26:	e002      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <prvProcessReceivedCommands+0x1a6>
					break;
 8006f2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f2e:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <prvProcessReceivedCommands+0x1c8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	1d39      	adds	r1, r7, #4
 8006f34:	2200      	movs	r2, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fbfc 	bl	8005734 <xQueueReceive>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f47f af26 	bne.w	8006d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	3730      	adds	r7, #48	@ 0x30
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000da0 	.word	0x20000da0

08006f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f5a:	e049      	b.n	8006ff0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f66:	4b2c      	ldr	r3, [pc, #176]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe f909 	bl	800518c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d02f      	beq.n	8006ff0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d90e      	bls.n	8006fc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe f8ae 	bl	800511a <vListInsert>
 8006fbe:	e017      	b.n	8006ff0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fd58 	bl	8006a80 <xTimerGenericCommand>
 8006fd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	603b      	str	r3, [r7, #0]
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ff0:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1b0      	bne.n	8006f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <prvSwitchTimerLists+0xc8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a04      	ldr	r2, [pc, #16]	@ (8007018 <prvSwitchTimerLists+0xc4>)
 8007006:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007008:	4a04      	ldr	r2, [pc, #16]	@ (800701c <prvSwitchTimerLists+0xc8>)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6013      	str	r3, [r2, #0]
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000d98 	.word	0x20000d98
 800701c:	20000d9c 	.word	0x20000d9c

08007020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007026:	f000 f96f 	bl	8007308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800702a:	4b15      	ldr	r3, [pc, #84]	@ (8007080 <prvCheckForValidListAndQueue+0x60>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d120      	bne.n	8007074 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007032:	4814      	ldr	r0, [pc, #80]	@ (8007084 <prvCheckForValidListAndQueue+0x64>)
 8007034:	f7fe f820 	bl	8005078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007038:	4813      	ldr	r0, [pc, #76]	@ (8007088 <prvCheckForValidListAndQueue+0x68>)
 800703a:	f7fe f81d 	bl	8005078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800703e:	4b13      	ldr	r3, [pc, #76]	@ (800708c <prvCheckForValidListAndQueue+0x6c>)
 8007040:	4a10      	ldr	r2, [pc, #64]	@ (8007084 <prvCheckForValidListAndQueue+0x64>)
 8007042:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007044:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <prvCheckForValidListAndQueue+0x70>)
 8007046:	4a10      	ldr	r2, [pc, #64]	@ (8007088 <prvCheckForValidListAndQueue+0x68>)
 8007048:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800704a:	2300      	movs	r3, #0
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4b11      	ldr	r3, [pc, #68]	@ (8007094 <prvCheckForValidListAndQueue+0x74>)
 8007050:	4a11      	ldr	r2, [pc, #68]	@ (8007098 <prvCheckForValidListAndQueue+0x78>)
 8007052:	2110      	movs	r1, #16
 8007054:	200a      	movs	r0, #10
 8007056:	f7fe f92d 	bl	80052b4 <xQueueGenericCreateStatic>
 800705a:	4603      	mov	r3, r0
 800705c:	4a08      	ldr	r2, [pc, #32]	@ (8007080 <prvCheckForValidListAndQueue+0x60>)
 800705e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007060:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <prvCheckForValidListAndQueue+0x60>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007068:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <prvCheckForValidListAndQueue+0x60>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	490b      	ldr	r1, [pc, #44]	@ (800709c <prvCheckForValidListAndQueue+0x7c>)
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd52 	bl	8005b18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007074:	f000 f97a 	bl	800736c <vPortExitCritical>
}
 8007078:	bf00      	nop
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000da0 	.word	0x20000da0
 8007084:	20000d70 	.word	0x20000d70
 8007088:	20000d84 	.word	0x20000d84
 800708c:	20000d98 	.word	0x20000d98
 8007090:	20000d9c 	.word	0x20000d9c
 8007094:	20000e4c 	.word	0x20000e4c
 8007098:	20000dac 	.word	0x20000dac
 800709c:	080079e0 	.word	0x080079e0

080070a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3b04      	subs	r3, #4
 80070b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b04      	subs	r3, #4
 80070be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f023 0201 	bic.w	r2, r3, #1
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3b04      	subs	r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007104 <pxPortInitialiseStack+0x64>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3b14      	subs	r3, #20
 80070da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f06f 0202 	mvn.w	r2, #2
 80070ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3b20      	subs	r3, #32
 80070f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	08007109 	.word	0x08007109

08007108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007112:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <prvTaskExitError+0x58>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d00b      	beq.n	8007134 <prvTaskExitError+0x2c>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	60fb      	str	r3, [r7, #12]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <prvTaskExitError+0x28>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	60bb      	str	r3, [r7, #8]
}
 8007146:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007148:	bf00      	nop
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0fc      	beq.n	800714a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000024 	.word	0x20000024
	...

08007170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007198:	4808      	ldr	r0, [pc, #32]	@ (80071bc <prvPortStartFirstTask+0x24>)
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	f380 8808 	msr	MSP, r0
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8814 	msr	CONTROL, r0
 80071aa:	b662      	cpsie	i
 80071ac:	b661      	cpsie	f
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	df00      	svc	0
 80071b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ba:	bf00      	nop
 80071bc:	e000ed08 	.word	0xe000ed08

080071c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <xPortStartScheduler+0x124>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a47      	ldr	r2, [pc, #284]	@ (80072e8 <xPortStartScheduler+0x128>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10b      	bne.n	80071e8 <xPortStartScheduler+0x28>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071e8:	4b3e      	ldr	r3, [pc, #248]	@ (80072e4 <xPortStartScheduler+0x124>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a3f      	ldr	r2, [pc, #252]	@ (80072ec <xPortStartScheduler+0x12c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10b      	bne.n	800720a <xPortStartScheduler+0x4a>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800720a:	4b39      	ldr	r3, [pc, #228]	@ (80072f0 <xPortStartScheduler+0x130>)
 800720c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	22ff      	movs	r2, #255	@ 0xff
 800721a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4b31      	ldr	r3, [pc, #196]	@ (80072f4 <xPortStartScheduler+0x134>)
 8007230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007232:	4b31      	ldr	r3, [pc, #196]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007234:	2207      	movs	r2, #7
 8007236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007238:	e009      	b.n	800724e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800723a:	4b2f      	ldr	r3, [pc, #188]	@ (80072f8 <xPortStartScheduler+0x138>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3b01      	subs	r3, #1
 8007240:	4a2d      	ldr	r2, [pc, #180]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007256:	2b80      	cmp	r3, #128	@ 0x80
 8007258:	d0ef      	beq.n	800723a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800725a:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <xPortStartScheduler+0x138>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1c3 0307 	rsb	r3, r3, #7
 8007262:	2b04      	cmp	r3, #4
 8007264:	d00b      	beq.n	800727e <xPortStartScheduler+0xbe>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007288:	4b1b      	ldr	r3, [pc, #108]	@ (80072f8 <xPortStartScheduler+0x138>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007290:	4a19      	ldr	r2, [pc, #100]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800729c:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <xPortStartScheduler+0x13c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a16      	ldr	r2, [pc, #88]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a8:	4b14      	ldr	r3, [pc, #80]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a13      	ldr	r2, [pc, #76]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072b4:	f000 f8da 	bl	800746c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b8:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <xPortStartScheduler+0x140>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072be:	f000 f8f9 	bl	80074b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072c2:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <xPortStartScheduler+0x144>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007304 <xPortStartScheduler+0x144>)
 80072c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ce:	f7ff ff63 	bl	8007198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072d2:	f7ff f839 	bl	8006348 <vTaskSwitchContext>
	prvTaskExitError();
 80072d6:	f7ff ff17 	bl	8007108 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	e000ed00 	.word	0xe000ed00
 80072e8:	410fc271 	.word	0x410fc271
 80072ec:	410fc270 	.word	0x410fc270
 80072f0:	e000e400 	.word	0xe000e400
 80072f4:	20000e9c 	.word	0x20000e9c
 80072f8:	20000ea0 	.word	0x20000ea0
 80072fc:	e000ed20 	.word	0xe000ed20
 8007300:	20000024 	.word	0x20000024
 8007304:	e000ef34 	.word	0xe000ef34

08007308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007322:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <vPortEnterCritical+0x5c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3301      	adds	r3, #1
 8007328:	4a0e      	ldr	r2, [pc, #56]	@ (8007364 <vPortEnterCritical+0x5c>)
 800732a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <vPortEnterCritical+0x5c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d110      	bne.n	8007356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <vPortEnterCritical+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <vPortEnterCritical+0x4e>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <vPortEnterCritical+0x4a>
	}
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000024 	.word	0x20000024
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007372:	4b12      	ldr	r3, [pc, #72]	@ (80073bc <vPortExitCritical+0x50>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <vPortExitCritical+0x26>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <vPortExitCritical+0x50>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3b01      	subs	r3, #1
 8007398:	4a08      	ldr	r2, [pc, #32]	@ (80073bc <vPortExitCritical+0x50>)
 800739a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800739c:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <vPortExitCritical+0x50>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <vPortExitCritical+0x44>
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000024 	.word	0x20000024

080073c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073c0:	f3ef 8009 	mrs	r0, PSP
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <pxCurrentTCBConst>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f01e 0f10 	tst.w	lr, #16
 80073d0:	bf08      	it	eq
 80073d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073e4:	f380 8811 	msr	BASEPRI, r0
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f7fe ffaa 	bl	8006348 <vTaskSwitchContext>
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f380 8811 	msr	BASEPRI, r0
 80073fc:	bc09      	pop	{r0, r3}
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6808      	ldr	r0, [r1, #0]
 8007402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007406:	f01e 0f10 	tst.w	lr, #16
 800740a:	bf08      	it	eq
 800740c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007410:	f380 8809 	msr	PSP, r0
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst>:
 8007420:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007442:	f7fe fec7 	bl	80061d4 <xTaskIncrementTick>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800744c:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <xPortSysTickHandler+0x40>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f383 8811 	msr	BASEPRI, r3
}
 800745e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007476:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <vPortSetupTimerInterrupt+0x38>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800747c:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <vPortSetupTimerInterrupt+0x3c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	@ (80074ac <vPortSetupTimerInterrupt+0x40>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <vPortSetupTimerInterrupt+0x44>)
 800748a:	3b01      	subs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800748e:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007490:	2207      	movs	r2, #7
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	e000e010 	.word	0xe000e010
 80074a4:	e000e018 	.word	0xe000e018
 80074a8:	20000004 	.word	0x20000004
 80074ac:	10624dd3 	.word	0x10624dd3
 80074b0:	e000e014 	.word	0xe000e014

080074b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074c4 <vPortEnableVFP+0x10>
 80074b8:	6801      	ldr	r1, [r0, #0]
 80074ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074be:	6001      	str	r1, [r0, #0]
 80074c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074c2:	bf00      	nop
 80074c4:	e000ed88 	.word	0xe000ed88

080074c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ce:	f3ef 8305 	mrs	r3, IPSR
 80074d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d915      	bls.n	8007506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074da:	4a18      	ldr	r2, [pc, #96]	@ (800753c <vPortValidateInterruptPriority+0x74>)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074e4:	4b16      	ldr	r3, [pc, #88]	@ (8007540 <vPortValidateInterruptPriority+0x78>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	7afa      	ldrb	r2, [r7, #11]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d20b      	bcs.n	8007506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007506:	4b0f      	ldr	r3, [pc, #60]	@ (8007544 <vPortValidateInterruptPriority+0x7c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800750e:	4b0e      	ldr	r3, [pc, #56]	@ (8007548 <vPortValidateInterruptPriority+0x80>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d90b      	bls.n	800752e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	603b      	str	r3, [r7, #0]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vPortValidateInterruptPriority+0x62>
	}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	e000e3f0 	.word	0xe000e3f0
 8007540:	20000e9c 	.word	0x20000e9c
 8007544:	e000ed0c 	.word	0xe000ed0c
 8007548:	20000ea0 	.word	0x20000ea0

0800754c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	@ 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007558:	f7fe fd80 	bl	800605c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800755c:	4b5c      	ldr	r3, [pc, #368]	@ (80076d0 <pvPortMalloc+0x184>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007564:	f000 f924 	bl	80077b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007568:	4b5a      	ldr	r3, [pc, #360]	@ (80076d4 <pvPortMalloc+0x188>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	f040 8095 	bne.w	80076a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01e      	beq.n	80075ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800757c:	2208      	movs	r2, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d015      	beq.n	80075ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	3308      	adds	r3, #8
 8007596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <pvPortMalloc+0x6e>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	617b      	str	r3, [r7, #20]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d06f      	beq.n	80076a0 <pvPortMalloc+0x154>
 80075c0:	4b45      	ldr	r3, [pc, #276]	@ (80076d8 <pvPortMalloc+0x18c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d86a      	bhi.n	80076a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075ca:	4b44      	ldr	r3, [pc, #272]	@ (80076dc <pvPortMalloc+0x190>)
 80075cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075ce:	4b43      	ldr	r3, [pc, #268]	@ (80076dc <pvPortMalloc+0x190>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075d4:	e004      	b.n	80075e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d903      	bls.n	80075f2 <pvPortMalloc+0xa6>
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f1      	bne.n	80075d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075f2:	4b37      	ldr	r3, [pc, #220]	@ (80076d0 <pvPortMalloc+0x184>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d051      	beq.n	80076a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2208      	movs	r2, #8
 8007602:	4413      	add	r3, r2
 8007604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	1ad2      	subs	r2, r2, r3
 8007616:	2308      	movs	r3, #8
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	429a      	cmp	r2, r3
 800761c:	d920      	bls.n	8007660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800761e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <pvPortMalloc+0xfc>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800765a:	69b8      	ldr	r0, [r7, #24]
 800765c:	f000 f90a 	bl	8007874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007660:	4b1d      	ldr	r3, [pc, #116]	@ (80076d8 <pvPortMalloc+0x18c>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	4a1b      	ldr	r2, [pc, #108]	@ (80076d8 <pvPortMalloc+0x18c>)
 800766c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800766e:	4b1a      	ldr	r3, [pc, #104]	@ (80076d8 <pvPortMalloc+0x18c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b1b      	ldr	r3, [pc, #108]	@ (80076e0 <pvPortMalloc+0x194>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d203      	bcs.n	8007682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800767a:	4b17      	ldr	r3, [pc, #92]	@ (80076d8 <pvPortMalloc+0x18c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a18      	ldr	r2, [pc, #96]	@ (80076e0 <pvPortMalloc+0x194>)
 8007680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <pvPortMalloc+0x188>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	431a      	orrs	r2, r3
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007696:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <pvPortMalloc+0x198>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a11      	ldr	r2, [pc, #68]	@ (80076e4 <pvPortMalloc+0x198>)
 800769e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a0:	f7fe fcea 	bl	8006078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <pvPortMalloc+0x17a>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60fb      	str	r3, [r7, #12]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <pvPortMalloc+0x176>
	return pvReturn;
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	@ 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20001aac 	.word	0x20001aac
 80076d4:	20001ac0 	.word	0x20001ac0
 80076d8:	20001ab0 	.word	0x20001ab0
 80076dc:	20001aa4 	.word	0x20001aa4
 80076e0:	20001ab4 	.word	0x20001ab4
 80076e4:	20001ab8 	.word	0x20001ab8

080076e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d04f      	beq.n	800779a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076fa:	2308      	movs	r3, #8
 80076fc:	425b      	negs	r3, r3
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4413      	add	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b25      	ldr	r3, [pc, #148]	@ (80077a4 <vPortFree+0xbc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <vPortFree+0x46>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60fb      	str	r3, [r7, #12]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <vPortFree+0x66>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <vPortFree+0xbc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01e      	beq.n	800779a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11a      	bne.n	800779a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <vPortFree+0xbc>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	43db      	mvns	r3, r3
 800776e:	401a      	ands	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007774:	f7fe fc72 	bl	800605c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <vPortFree+0xc0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4413      	add	r3, r2
 8007782:	4a09      	ldr	r2, [pc, #36]	@ (80077a8 <vPortFree+0xc0>)
 8007784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007786:	6938      	ldr	r0, [r7, #16]
 8007788:	f000 f874 	bl	8007874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800778c:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <vPortFree+0xc4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a06      	ldr	r2, [pc, #24]	@ (80077ac <vPortFree+0xc4>)
 8007794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007796:	f7fe fc6f 	bl	8006078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20001ac0 	.word	0x20001ac0
 80077a8:	20001ab0 	.word	0x20001ab0
 80077ac:	20001abc 	.word	0x20001abc

080077b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80077ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077bc:	4b27      	ldr	r3, [pc, #156]	@ (800785c <prvHeapInit+0xac>)
 80077be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00c      	beq.n	80077e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3307      	adds	r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	4a1f      	ldr	r2, [pc, #124]	@ (800785c <prvHeapInit+0xac>)
 80077e0:	4413      	add	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007860 <prvHeapInit+0xb0>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007860 <prvHeapInit+0xb0>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4413      	add	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077fc:	2208      	movs	r2, #8
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <prvHeapInit+0xb4>)
 8007810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007812:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <prvHeapInit+0xb4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781a:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <prvHeapInit+0xb4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007830:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <prvHeapInit+0xb4>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <prvHeapInit+0xb8>)
 800783e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a09      	ldr	r2, [pc, #36]	@ (800786c <prvHeapInit+0xbc>)
 8007846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007848:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <prvHeapInit+0xc0>)
 800784a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800784e:	601a      	str	r2, [r3, #0]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	20000ea4 	.word	0x20000ea4
 8007860:	20001aa4 	.word	0x20001aa4
 8007864:	20001aac 	.word	0x20001aac
 8007868:	20001ab4 	.word	0x20001ab4
 800786c:	20001ab0 	.word	0x20001ab0
 8007870:	20001ac0 	.word	0x20001ac0

08007874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800787c:	4b28      	ldr	r3, [pc, #160]	@ (8007920 <prvInsertBlockIntoFreeList+0xac>)
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e002      	b.n	8007888 <prvInsertBlockIntoFreeList+0x14>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	429a      	cmp	r2, r3
 8007890:	d8f7      	bhi.n	8007882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d108      	bne.n	80078b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	441a      	add	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d118      	bne.n	80078fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <prvInsertBlockIntoFreeList+0xb0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d00d      	beq.n	80078f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	441a      	add	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e008      	b.n	8007904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <prvInsertBlockIntoFreeList+0xb0>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e003      	b.n	8007904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d002      	beq.n	8007912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20001aa4 	.word	0x20001aa4
 8007924:	20001aac 	.word	0x20001aac

08007928 <memset>:
 8007928:	4402      	add	r2, r0
 800792a:	4603      	mov	r3, r0
 800792c:	4293      	cmp	r3, r2
 800792e:	d100      	bne.n	8007932 <memset+0xa>
 8007930:	4770      	bx	lr
 8007932:	f803 1b01 	strb.w	r1, [r3], #1
 8007936:	e7f9      	b.n	800792c <memset+0x4>

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	@ (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	@ (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	@ (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	@ (800797c <__libc_init_array+0x44>)
 800794c:	f000 f826 	bl	800799c <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08007a90 	.word	0x08007a90
 8007974:	08007a90 	.word	0x08007a90
 8007978:	08007a90 	.word	0x08007a90
 800797c:	08007a94 	.word	0x08007a94

08007980 <memcpy>:
 8007980:	440a      	add	r2, r1
 8007982:	4291      	cmp	r1, r2
 8007984:	f100 33ff 	add.w	r3, r0, #4294967295
 8007988:	d100      	bne.n	800798c <memcpy+0xc>
 800798a:	4770      	bx	lr
 800798c:	b510      	push	{r4, lr}
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007996:	4291      	cmp	r1, r2
 8007998:	d1f9      	bne.n	800798e <memcpy+0xe>
 800799a:	bd10      	pop	{r4, pc}

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
